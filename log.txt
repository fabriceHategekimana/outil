
evaluate expression
------------------------EVAL
subEval de l'expression: sum([2,3,1])
subEval a échoué
------------------------EE
expression: sum([2,3,1])
--------------------RULE
règle choisie: ['sum([])', '', 'sum([])->0']
résultat de l'union:  False
Le fait ne match pas, on passe à la prochaine règle
final applyRule: error
--------------------RULE
règle choisie: ['sum(L)', 'L->Lp', 'sum(L)->add(pop(Lp),sum(removeLast(Lp)))']
résultat de l'union:  [['L', '[2,3,1]']]
premisse obtenue: L->Lp
expression à tester: [2,3,1]->Lp
------------------------EVAL
subEval de l'expression: [2,3,1]
résultat du test -> : [2,3,1]
res de L->Lp: [['L', '[2,3,1]'], ['Lp', '[2,3,1]']]
règle accomplie
conclusion: add(pop([2,3,1]),sum(removeLast([2,3,1])))
------------------------EVAL
subEval de l'expression: add(pop([2,3,1]),sum(removeLast([2,3,1])))
subEval a échoué
------------------------EE
expression: add(pop([2,3,1]),sum(removeLast([2,3,1])))
--------------------RULE
règle choisie: ['add(N;O)', 'N->P;O->Q', 'add(P;Q)']
résultat de l'union:  [['N', 'pop([2,3,1])'], ['O', 'sum(removeLast([2,3,1]))']]
premisse obtenue: N->P
expression à tester: pop([2,3,1])->P
------------------------EVAL
subEval de l'expression: pop([2,3,1])
résultat du test -> : 1
res de N->P: [['N', 'pop([2,3,1])'], ['O', 'sum(removeLast([2,3,1]))'], ['P', '1']]
règle accomplie
premisse obtenue: O->Q
expression à tester: sum(removeLast([2,3,1]))->Q
------------------------EVAL
subEval de l'expression: sum(removeLast([2,3,1]))
subEval a échoué
------------------------EE
expression: sum(removeLast([2,3,1]))
--------------------RULE
règle choisie: ['sum([])', '', 'sum([])->0']
résultat de l'union:  False
Le fait ne match pas, on passe à la prochaine règle
final applyRule: error
--------------------RULE
règle choisie: ['sum(L)', 'L->Lp', 'sum(L)->add(pop(Lp),sum(removeLast(Lp)))']
résultat de l'union:  [['L', 'removeLast([2,3,1])']]
premisse obtenue: L->Lp
expression à tester: removeLast([2,3,1])->Lp
------------------------EVAL
subEval de l'expression: removeLast([2,3,1])
résultat du test -> : [2, 3]
res de L->Lp: [['L', 'removeLast([2,3,1])'], ['Lp', '[2, 3]']]
règle accomplie
conclusion: add(pop([2, 3]),sum(removeLast([2, 3])))
------------------------EVAL
subEval de l'expression: add(pop([2, 3]),sum(removeLast([2, 3])))
subEval a échoué
------------------------EE
expression: add(pop([2, 3]),sum(removeLast([2, 3])))
--------------------RULE
règle choisie: ['add(N;O)', 'N->P;O->Q', 'add(P;Q)']
résultat de l'union:  [['N', 'pop([2,3])'], ['O', 'sum(removeLast([2,3]))']]
premisse obtenue: N->P
expression à tester: pop([2,3])->P
------------------------EVAL
subEval de l'expression: pop([2,3])
résultat du test -> : 3
res de N->P: [['N', 'pop([2,3])'], ['O', 'sum(removeLast([2,3]))'], ['P', '3']]
règle accomplie
premisse obtenue: O->Q
expression à tester: sum(removeLast([2,3]))->Q
------------------------EVAL
subEval de l'expression: sum(removeLast([2,3]))
subEval a échoué
------------------------EE
expression: sum(removeLast([2,3]))
--------------------RULE
règle choisie: ['sum([])', '', 'sum([])->0']
résultat de l'union:  False
Le fait ne match pas, on passe à la prochaine règle
final applyRule: error
--------------------RULE
règle choisie: ['sum(L)', 'L->Lp', 'sum(L)->add(pop(Lp),sum(removeLast(Lp)))']
résultat de l'union:  [['L', 'removeLast([2,3])']]
premisse obtenue: L->Lp
expression à tester: removeLast([2,3])->Lp
------------------------EVAL
subEval de l'expression: removeLast([2,3])
résultat du test -> : [2]
res de L->Lp: [['L', 'removeLast([2,3])'], ['Lp', '[2]']]
règle accomplie
conclusion: add(pop([2]),sum(removeLast([2])))
------------------------EVAL
subEval de l'expression: add(pop([2]),sum(removeLast([2])))
subEval a échoué
------------------------EE
expression: add(pop([2]),sum(removeLast([2])))
--------------------RULE
règle choisie: ['add(N;O)', 'N->P;O->Q', 'add(P;Q)']
résultat de l'union:  [['N', 'pop([2])'], ['O', 'sum(removeLast([2]))']]
premisse obtenue: N->P
expression à tester: pop([2])->P
------------------------EVAL
subEval de l'expression: pop([2])
résultat du test -> : 2
res de N->P: [['N', 'pop([2])'], ['O', 'sum(removeLast([2]))'], ['P', '2']]
règle accomplie
premisse obtenue: O->Q
expression à tester: sum(removeLast([2]))->Q
------------------------EVAL
subEval de l'expression: sum(removeLast([2]))
subEval a échoué
------------------------EE
expression: sum(removeLast([2]))
--------------------RULE
règle choisie: ['sum([])', '', 'sum([])->0']
résultat de l'union:  True
Le fait match
conclusion: 0
------------------------EVAL
subEval de l'expression: 0
final applyRule: 0
résultat du test -> : 0
res de O->Q: [['N', 'pop([2])'], ['O', 'sum(removeLast([2]))'], ['P', '2'], ['Q', '0']]
règle accomplie
conclusion: 2
------------------------EVAL
subEval de l'expression: 2
final applyRule: 2
final applyRule: 2
résultat du test -> : 2
res de O->Q: [['N', 'pop([2,3])'], ['O', 'sum(removeLast([2,3]))'], ['P', '3'], ['Q', '2']]
règle accomplie
conclusion: 5
------------------------EVAL
subEval de l'expression: 5
final applyRule: 5
final applyRule: 5
résultat du test -> : 5
res de O->Q: [['N', 'pop([2,3,1])'], ['O', 'sum(removeLast([2,3,1]))'], ['P', '1'], ['Q', '5']]
règle accomplie
conclusion: 6
------------------------EVAL
subEval de l'expression: 6
final applyRule: 6
final applyRule: 6
