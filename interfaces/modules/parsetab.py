
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startCALC CHECK COMA CP CSB EQUAL FALSE IN INF ISLIST ISNUMBER ISSTRING MINUS NAME NUM OP OSB SEMICOLON SPLIT STATE STRING SUP TOKEN TRUE VAR\n    start : CALC calc\n          | CHECK check\n          | SPLIT split\n          | TOKEN token\n          | ISNUMBER isnumber\n          | ISSTRING isstring\n          | STATE state\n    \n    lang : premises MINUS MINUS conclusion\n         | MINUS MINUS conclusion\n    \n    premises : statement\n    \n    statement : statement COMA statement\n    \n    statement : exp symb term\n              | exp symb VAR\n    \n    statement : exp IN NAME\n    \n    exp : exp COMA exp\n        | exp SEMICOLON exp\n    \n    exp : NAME OP exp CP\n    \n    exp : term\n        | VAR\n    \n    term : NUM\n        | STRING\n        | boolean\n        | list\n    \n    list : OSB exp CSB\n         | INF exp SUP\n    \n    list : OSB CSB\n    \n    symb : EQUAL EQUAL\n         | INF EQUAL\n         | SUP EQUAL\n         | INF\n         | SUP\n         | MINUS SUP\n    \n    conclusion : exp MINUS SUP exp\n    \n    conclusion : list ins_exp MINUS SUP list\n    \n    ins_exp : NAME\n            | exp\n    \n    boolean : TRUE\n            | FALSE\n    \n    check : lang\n    \n    split : s_exp\n    \n    s_exp : s_exp COMA s_exp\n          | s_exp SEMICOLON s_exp\n    \n    s_exp : NAME OP exp CP\n    \n    s_exp : term\n          | VAR\n    \n    token : t_exp\n          | t_list\n          | t_statement\n          | t_state_ins\n    \n    t_exp : t_exp COMA t_exp\n          | t_exp SEMICOLON t_exp\n    \n    t_exp : NAME OP t_exp CP\n    \n    t_exp : t_term\n          | VAR\n    \n    t_term : NUM\n           | boolean\n           | t_list\n    \n    t_list : OSB t_exp CSB\n           | INF t_exp SUP\n    \n    t_list : OSB CSB\n           | INF SUP\n    \n    t_statement : t_statement COMA t_statement\n    \n    t_statement : t_exp symb term\n                | t_exp symb VAR\n    \n    t_statement : t_exp IN NAME\n    \n    t_state_ins : t_list t_ins_exp\n    \n    t_ins_exp : t_ins\n              | t_exp\n    \n    t_ins : NAME\n    \n    isnumber : NUM\n    \n    isstring : STRING\n    \n    calc : c_exp\n    \n    calc : c_condition\n    \n    c_condition : c_exp comparator c_exp\n    \n    comparator : EQUAL EQUAL\n               | SUP\n               | SUP EQUAL\n               | INF\n               | INF EQUAL\n    \n    c_exp : NAME OP c_exp CP\n    \n    c_exp : c_exp COMA c_exp\n          | c_exp SEMICOLON c_exp\n    \n    c_exp : NUM\n          | boolean\n          | STRING\n    \n    c_exp : list\n    \n    c_list : OSB c_morelist CSB\n    \n    c_morelist : NUM COMA c_morelist\n               | NUM SEMICOLON c_morelist\n    \n    c_morelist : NUM\n    \n    c_list : OSB CSB\n    \n    c_list : INF c_morelist SUP\n    \n    state : st_list st_ins_exp\n    \n    st_ins_exp : st_ins\n    \n    st_ins_exp : st_exp\n    \n    st_ins : NAME\n    \n    st_exp : NAME OP t_exp CP\n    \n    st_list : OSB s_exp CSB\n            | INF s_exp SUP\n    '
    
_lr_action_items = {'CALC':([0,],[2,]),'CHECK':([0,],[3,]),'SPLIT':([0,],[4,]),'TOKEN':([0,],[5,]),'ISNUMBER':([0,],[6,]),'ISSTRING':([0,],[7,]),'STATE':([0,],[8,]),'$end':([1,9,10,11,13,14,15,16,17,18,21,22,27,28,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,49,50,51,52,53,54,55,67,88,89,90,91,92,96,98,99,100,101,102,105,106,107,112,113,115,122,123,129,130,132,133,134,135,136,137,140,141,145,146,151,152,153,157,158,160,],[0,-1,-72,-73,-83,-84,-85,-86,-37,-38,-2,-39,-18,-19,-20,-21,-22,-23,-3,-40,-44,-45,-4,-46,-47,-48,-49,-53,-54,-55,-56,-5,-70,-6,-71,-7,-26,-57,-66,-67,-68,-69,-60,-61,-93,-94,-95,-96,-81,-82,-74,-24,-25,-9,-15,-16,-41,-42,-50,-51,-63,-64,-65,-62,-58,-59,-80,-8,-17,-43,-52,-97,-33,-34,]),'NAME':([2,3,4,5,19,20,41,47,48,56,57,58,59,60,61,63,64,65,67,70,71,73,74,75,80,81,82,83,84,85,87,93,94,96,98,108,109,110,112,113,114,117,140,141,142,143,144,155,],[12,29,36,44,29,29,92,44,44,102,36,36,12,12,12,-76,-78,12,-26,29,29,121,29,29,29,36,36,29,44,44,136,44,44,-60,-61,-75,-77,-79,-24,-25,29,149,-58,-59,44,-98,-99,29,]),'NUM':([2,3,4,5,6,19,20,41,47,48,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,93,94,96,98,108,109,110,112,113,114,117,124,125,126,127,140,141,142,155,],[13,30,30,49,52,30,30,49,49,49,30,30,13,13,13,-76,-78,13,-26,30,30,30,30,30,-30,-31,30,30,30,30,49,49,30,49,49,-60,-61,-75,-77,-79,-24,-25,30,30,-27,-28,-29,-32,-58,-59,49,30,]),'STRING':([2,3,4,7,19,20,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,86,108,109,110,112,113,114,117,124,125,126,127,155,],[15,31,31,54,31,31,31,31,15,15,15,-76,-78,15,-26,31,31,31,31,31,-30,-31,31,31,31,31,31,-75,-77,-79,-24,-25,31,31,-27,-28,-29,-32,31,]),'TRUE':([2,3,4,5,19,20,41,47,48,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,93,94,96,98,108,109,110,112,113,114,117,124,125,126,127,140,141,142,155,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,-76,-78,17,-26,17,17,17,17,17,-30,-31,17,17,17,17,17,17,17,17,17,-60,-61,-75,-77,-79,-24,-25,17,17,-27,-28,-29,-32,-58,-59,17,17,]),'FALSE':([2,3,4,5,19,20,41,47,48,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,93,94,96,98,108,109,110,112,113,114,117,124,125,126,127,140,141,142,155,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,-76,-78,18,-26,18,18,18,18,18,-30,-31,18,18,18,18,18,18,18,18,18,-60,-61,-75,-77,-79,-24,-25,18,18,-27,-28,-29,-32,-58,-59,18,18,]),'OSB':([2,3,4,5,8,19,20,41,47,48,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,93,94,96,98,108,109,110,112,113,114,117,124,125,126,127,140,141,142,155,159,],[19,19,19,47,57,19,19,47,47,47,19,19,19,19,19,-76,-78,19,-26,19,19,19,19,19,-30,-31,19,19,19,19,47,47,19,47,47,-60,-61,-75,-77,-79,-24,-25,19,19,-27,-28,-29,-32,-58,-59,47,19,19,]),'INF':([2,3,4,5,8,10,13,14,15,16,17,18,19,20,26,27,28,30,31,32,33,40,41,45,46,47,48,49,50,57,58,59,60,61,63,64,65,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,88,93,94,96,98,105,106,108,109,110,112,113,114,117,122,123,124,125,126,127,132,133,138,140,141,142,145,151,153,155,159,],[20,20,20,48,58,64,-83,-84,-85,-86,-37,-38,20,20,77,-18,-19,-20,-21,-22,-23,77,48,-53,-54,48,48,-55,-56,20,20,20,20,20,-76,-78,20,-26,20,20,20,20,20,-30,-31,20,20,20,20,48,48,20,-57,48,48,-60,-61,-81,-82,-75,-77,-79,-24,-25,20,20,-15,-16,-27,-28,-29,-32,-50,-51,77,-58,-59,48,-80,-17,-52,20,20,]),'MINUS':([3,17,18,23,24,25,26,27,28,30,31,32,33,40,41,45,46,49,50,67,69,88,96,98,112,113,116,117,118,119,120,121,122,123,132,133,138,140,141,148,149,150,151,153,],[24,-37,-38,69,70,-10,79,-18,-19,-20,-21,-22,-23,79,-57,-53,-54,-55,-56,-26,114,-57,-60,-61,-24,-25,147,-23,-11,-12,-13,-14,-15,-16,-50,-51,79,-58,-59,156,-35,-36,-17,-52,]),'VAR':([3,4,5,19,20,41,47,48,57,58,67,70,71,72,74,75,77,78,80,81,82,83,84,85,86,93,94,96,98,112,113,114,117,124,125,126,127,140,141,142,155,],[28,38,46,28,28,46,46,46,38,38,-26,28,28,120,28,28,-30,-31,28,38,38,28,46,46,135,46,46,-60,-61,-24,-25,28,28,-27,-28,-29,-32,-58,-59,46,28,]),'COMA':([10,13,14,15,16,17,18,25,26,27,28,30,31,32,33,35,37,38,40,41,42,45,46,49,50,66,67,68,88,91,95,96,97,98,103,104,105,106,107,111,112,113,116,117,118,119,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,145,150,151,152,153,154,158,],[59,-83,-84,-85,-86,-37,-38,71,74,-18,-19,-20,-21,-22,-23,81,-44,-45,84,-57,93,-53,-54,-55,-56,74,-26,74,-57,84,84,-60,84,-61,81,81,59,59,59,59,-24,-25,74,-23,71,-12,-13,-14,74,74,74,81,81,74,84,84,-63,-64,-65,93,84,84,-58,-59,-80,74,-17,-43,-52,84,74,]),'SEMICOLON':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,35,37,38,40,41,45,46,49,50,66,67,68,88,91,95,96,97,98,103,104,105,106,107,111,112,113,116,117,122,123,128,129,130,131,132,133,138,139,140,141,145,150,151,152,153,154,158,],[60,-83,-84,-85,-86,-37,-38,75,-18,-19,-20,-21,-22,-23,82,-44,-45,85,-57,-53,-54,-55,-56,75,-26,75,-57,85,85,-60,85,-61,82,82,60,60,60,60,-24,-25,75,-23,75,75,75,82,82,75,85,85,85,85,-58,-59,-80,75,-17,-43,-52,85,75,]),'EQUAL':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,40,41,45,46,49,50,62,63,64,67,76,77,78,88,96,98,105,106,112,113,122,123,132,133,138,140,141,145,151,153,],[62,-83,-84,-85,-86,-37,-38,76,-18,-19,-20,-21,-22,-23,76,-57,-53,-54,-55,-56,108,109,110,-26,124,125,126,-57,-60,-61,-81,-82,-24,-25,-15,-16,-50,-51,76,-58,-59,-80,-17,-52,]),'SUP':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,37,38,40,41,45,46,48,49,50,67,68,79,88,96,97,98,104,105,106,112,113,122,123,129,130,132,133,138,140,141,145,147,151,152,153,156,],[63,-83,-84,-85,-86,-37,-38,78,-18,-19,-20,-21,-22,-23,-44,-45,78,-57,-53,-54,98,-55,-56,-26,113,127,-57,-60,141,-61,144,-81,-82,-24,-25,-15,-16,-41,-42,-50,-51,78,-58,-59,-80,155,-17,-43,-52,159,]),'OP':([12,29,36,44,92,102,149,],[65,80,83,94,94,142,80,]),'CP':([13,14,15,16,17,18,27,28,30,31,32,33,45,46,49,50,67,88,96,98,105,106,111,112,113,122,123,128,131,132,133,139,140,141,145,151,153,154,],[-83,-84,-85,-86,-37,-38,-18,-19,-20,-21,-22,-23,-53,-54,-55,-56,-26,-57,-60,-61,-81,-82,145,-24,-25,-15,-16,151,152,-50,-51,153,-58,-59,-80,-17,-52,157,]),'IN':([17,18,26,27,28,30,31,32,33,40,41,45,46,49,50,67,88,96,98,112,113,122,123,132,133,138,140,141,151,153,],[-37,-38,73,-18,-19,-20,-21,-22,-23,87,-57,-53,-54,-55,-56,-26,-57,-60,-61,-24,-25,-15,-16,-50,-51,87,-58,-59,-17,-52,]),'CSB':([17,18,19,27,28,30,31,32,33,37,38,45,46,47,49,50,66,67,88,95,96,98,103,112,113,122,123,129,130,132,133,140,141,151,152,153,],[-37,-38,67,-18,-19,-20,-21,-22,-23,-44,-45,-53,-54,96,-55,-56,112,-26,-57,140,-60,-61,143,-24,-25,-15,-16,-41,-42,-50,-51,-58,-59,-17,-43,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'calc':([2,],[9,]),'c_exp':([2,59,60,61,65,],[10,105,106,107,111,]),'c_condition':([2,],[11,]),'boolean':([2,3,4,5,19,20,41,47,48,57,58,59,60,61,65,70,71,72,74,75,80,81,82,83,84,85,86,93,94,114,117,142,155,],[14,32,32,50,32,32,50,50,50,32,32,14,14,14,14,32,32,32,32,32,32,32,32,32,50,50,32,50,50,32,32,50,32,]),'list':([2,3,4,19,20,57,58,59,60,61,65,70,71,72,74,75,80,81,82,83,86,114,117,155,159,],[16,33,33,33,33,33,33,16,16,16,16,117,33,33,33,33,33,33,33,33,33,117,33,33,160,]),'check':([3,],[21,]),'lang':([3,],[22,]),'premises':([3,],[23,]),'statement':([3,71,],[25,118,]),'exp':([3,19,20,70,71,74,75,80,83,114,117,155,],[26,66,68,116,26,122,123,128,131,116,150,158,]),'term':([3,4,19,20,57,58,70,71,72,74,75,80,81,82,83,86,114,117,155,],[27,37,27,27,37,37,27,27,119,27,27,27,37,37,27,134,27,27,27,]),'split':([4,],[34,]),'s_exp':([4,57,58,81,82,],[35,103,104,129,130,]),'token':([5,],[39,]),'t_exp':([5,41,47,48,84,85,93,94,142,],[40,91,95,97,132,133,138,139,154,]),'t_list':([5,41,47,48,84,85,93,94,142,],[41,88,88,88,88,88,88,88,88,]),'t_statement':([5,93,],[42,137,]),'t_state_ins':([5,],[43,]),'t_term':([5,41,47,48,84,85,93,94,142,],[45,45,45,45,45,45,45,45,45,]),'isnumber':([6,],[51,]),'isstring':([7,],[53,]),'state':([8,],[55,]),'st_list':([8,],[56,]),'comparator':([10,],[61,]),'symb':([26,40,138,],[72,86,86,]),'t_ins_exp':([41,],[89,]),'t_ins':([41,],[90,]),'st_ins_exp':([56,],[99,]),'st_ins':([56,],[100,]),'st_exp':([56,],[101,]),'conclusion':([70,114,],[115,146,]),'ins_exp':([117,],[148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> CALC calc','start',2,'p_start','compile.py',154),
  ('start -> CHECK check','start',2,'p_start','compile.py',155),
  ('start -> SPLIT split','start',2,'p_start','compile.py',156),
  ('start -> TOKEN token','start',2,'p_start','compile.py',157),
  ('start -> ISNUMBER isnumber','start',2,'p_start','compile.py',158),
  ('start -> ISSTRING isstring','start',2,'p_start','compile.py',159),
  ('start -> STATE state','start',2,'p_start','compile.py',160),
  ('lang -> premises MINUS MINUS conclusion','lang',4,'p_lang','compile.py',166),
  ('lang -> MINUS MINUS conclusion','lang',3,'p_lang','compile.py',167),
  ('premises -> statement','premises',1,'p_premises','compile.py',175),
  ('statement -> statement COMA statement','statement',3,'p_statement1','compile.py',181),
  ('statement -> exp symb term','statement',3,'p_statement2','compile.py',188),
  ('statement -> exp symb VAR','statement',3,'p_statement2','compile.py',189),
  ('statement -> exp IN NAME','statement',3,'p_statement3','compile.py',196),
  ('exp -> exp COMA exp','exp',3,'p_exp1','compile.py',203),
  ('exp -> exp SEMICOLON exp','exp',3,'p_exp1','compile.py',204),
  ('exp -> NAME OP exp CP','exp',4,'p_exp2','compile.py',211),
  ('exp -> term','exp',1,'p_exp3','compile.py',218),
  ('exp -> VAR','exp',1,'p_exp3','compile.py',219),
  ('term -> NUM','term',1,'p_term','compile.py',226),
  ('term -> STRING','term',1,'p_term','compile.py',227),
  ('term -> boolean','term',1,'p_term','compile.py',228),
  ('term -> list','term',1,'p_term','compile.py',229),
  ('list -> OSB exp CSB','list',3,'p_list1','compile.py',236),
  ('list -> INF exp SUP','list',3,'p_list1','compile.py',237),
  ('list -> OSB CSB','list',2,'p_list2','compile.py',244),
  ('symb -> EQUAL EQUAL','symb',2,'p_symb','compile.py',251),
  ('symb -> INF EQUAL','symb',2,'p_symb','compile.py',252),
  ('symb -> SUP EQUAL','symb',2,'p_symb','compile.py',253),
  ('symb -> INF','symb',1,'p_symb','compile.py',254),
  ('symb -> SUP','symb',1,'p_symb','compile.py',255),
  ('symb -> MINUS SUP','symb',2,'p_symb','compile.py',256),
  ('conclusion -> exp MINUS SUP exp','conclusion',4,'p_conclusion1','compile.py',263),
  ('conclusion -> list ins_exp MINUS SUP list','conclusion',5,'p_conclusion2','compile.py',270),
  ('ins_exp -> NAME','ins_exp',1,'p_ins_exp','compile.py',277),
  ('ins_exp -> exp','ins_exp',1,'p_ins_exp','compile.py',278),
  ('boolean -> TRUE','boolean',1,'p_boolean','compile.py',285),
  ('boolean -> FALSE','boolean',1,'p_boolean','compile.py',286),
  ('check -> lang','check',1,'p_check','compile.py',299),
  ('split -> s_exp','split',1,'p_split','compile.py',313),
  ('s_exp -> s_exp COMA s_exp','s_exp',3,'p_s_exp1','compile.py',320),
  ('s_exp -> s_exp SEMICOLON s_exp','s_exp',3,'p_s_exp1','compile.py',321),
  ('s_exp -> NAME OP exp CP','s_exp',4,'p_s_exp2','compile.py',328),
  ('s_exp -> term','s_exp',1,'p_s_exp3','compile.py',335),
  ('s_exp -> VAR','s_exp',1,'p_s_exp3','compile.py',336),
  ('token -> t_exp','token',1,'p_token','compile.py',350),
  ('token -> t_list','token',1,'p_token','compile.py',351),
  ('token -> t_statement','token',1,'p_token','compile.py',352),
  ('token -> t_state_ins','token',1,'p_token','compile.py',353),
  ('t_exp -> t_exp COMA t_exp','t_exp',3,'p_t_exp1','compile.py',359),
  ('t_exp -> t_exp SEMICOLON t_exp','t_exp',3,'p_t_exp1','compile.py',360),
  ('t_exp -> NAME OP t_exp CP','t_exp',4,'p_t_exp2','compile.py',367),
  ('t_exp -> t_term','t_exp',1,'p_t_exp3','compile.py',374),
  ('t_exp -> VAR','t_exp',1,'p_t_exp3','compile.py',375),
  ('t_term -> NUM','t_term',1,'p_t_term','compile.py',382),
  ('t_term -> boolean','t_term',1,'p_t_term','compile.py',383),
  ('t_term -> t_list','t_term',1,'p_t_term','compile.py',384),
  ('t_list -> OSB t_exp CSB','t_list',3,'p_t_list1','compile.py',391),
  ('t_list -> INF t_exp SUP','t_list',3,'p_t_list1','compile.py',392),
  ('t_list -> OSB CSB','t_list',2,'p_t_list2','compile.py',399),
  ('t_list -> INF SUP','t_list',2,'p_t_list2','compile.py',400),
  ('t_statement -> t_statement COMA t_statement','t_statement',3,'p_t_statement1','compile.py',407),
  ('t_statement -> t_exp symb term','t_statement',3,'p_t_statement2','compile.py',414),
  ('t_statement -> t_exp symb VAR','t_statement',3,'p_t_statement2','compile.py',415),
  ('t_statement -> t_exp IN NAME','t_statement',3,'p_t_statement3','compile.py',422),
  ('t_state_ins -> t_list t_ins_exp','t_state_ins',2,'p_t_state_ins','compile.py',429),
  ('t_ins_exp -> t_ins','t_ins_exp',1,'p_t_ins_exp','compile.py',436),
  ('t_ins_exp -> t_exp','t_ins_exp',1,'p_t_ins_exp','compile.py',437),
  ('t_ins -> NAME','t_ins',1,'p_t_ins','compile.py',444),
  ('isnumber -> NUM','isnumber',1,'p_isnumber','compile.py',459),
  ('isstring -> STRING','isstring',1,'p_isstring','compile.py',475),
  ('calc -> c_exp','calc',1,'p_calc','compile.py',490),
  ('calc -> c_condition','calc',1,'p_calc2','compile.py',497),
  ('c_condition -> c_exp comparator c_exp','c_condition',3,'p_condition','compile.py',504),
  ('comparator -> EQUAL EQUAL','comparator',2,'p_comparator','compile.py',510),
  ('comparator -> SUP','comparator',1,'p_comparator','compile.py',511),
  ('comparator -> SUP EQUAL','comparator',2,'p_comparator','compile.py',512),
  ('comparator -> INF','comparator',1,'p_comparator','compile.py',513),
  ('comparator -> INF EQUAL','comparator',2,'p_comparator','compile.py',514),
  ('c_exp -> NAME OP c_exp CP','c_exp',4,'p_exp_operator','compile.py',520),
  ('c_exp -> c_exp COMA c_exp','c_exp',3,'p_exp_more','compile.py',527),
  ('c_exp -> c_exp SEMICOLON c_exp','c_exp',3,'p_exp_more','compile.py',528),
  ('c_exp -> NUM','c_exp',1,'p_exp_int','compile.py',534),
  ('c_exp -> boolean','c_exp',1,'p_exp_int','compile.py',535),
  ('c_exp -> STRING','c_exp',1,'p_exp_int','compile.py',536),
  ('c_exp -> list','c_exp',1,'p_exp_list','compile.py',542),
  ('c_list -> OSB c_morelist CSB','c_list',3,'p_exp_list1','compile.py',548),
  ('c_morelist -> NUM COMA c_morelist','c_morelist',3,'p_exp_list2','compile.py',554),
  ('c_morelist -> NUM SEMICOLON c_morelist','c_morelist',3,'p_exp_list2','compile.py',555),
  ('c_morelist -> NUM','c_morelist',1,'p_exp_list3','compile.py',561),
  ('c_list -> OSB CSB','c_list',2,'p_exp_list4','compile.py',567),
  ('c_list -> INF c_morelist SUP','c_list',3,'p_exp_list5','compile.py',573),
  ('state -> st_list st_ins_exp','state',2,'p_state','compile.py',586),
  ('st_ins_exp -> st_ins','st_ins_exp',1,'p_st_ins_exp1','compile.py',594),
  ('st_ins_exp -> st_exp','st_ins_exp',1,'p_st_ins_exp2','compile.py',600),
  ('st_ins -> NAME','st_ins',1,'p_st_ins','compile.py',607),
  ('st_exp -> NAME OP t_exp CP','st_exp',4,'p_st_exp','compile.py',614),
  ('st_list -> OSB s_exp CSB','st_list',3,'p_st_list','compile.py',626),
  ('st_list -> INF s_exp SUP','st_list',3,'p_st_list','compile.py',627),
]
