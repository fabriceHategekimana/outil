
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startCALC CHECK COMA CP CSB EQUAL EXC FALSE IN INF ISLIST ISNUMBER ISSTRING MINUS NAME NUM OP OSB SEMICOLON SPLIT STATE STRING SUP TOKEN TRUE VAR\n    start : CALC calc\n          | CHECK check\n          | SPLIT split\n          | TOKEN token\n          | ISNUMBER isnumber\n          | ISSTRING isstring\n          | STATE state\n    \n    lang : premises MINUS MINUS conclusion\n         | MINUS MINUS conclusion\n    \n    premises : statement\n    \n    statement : statement COMA statement\n    \n    statement : exp symb term\n              | exp symb VAR\n    \n    statement : exp IN NAME\n    \n    exp : exp COMA exp\n        | exp SEMICOLON exp\n    \n    exp : NAME OP exp CP\n    \n    exp : term\n        | VAR\n    \n    term : NUM\n        | STRING\n        | boolean\n        | list\n    \n    list : OSB exp CSB\n         | INF exp SUP\n    \n    list : OSB CSB\n    \n    symb : EQUAL EQUAL\n         | EXC EQUAL\n         | INF EQUAL\n         | SUP EQUAL\n         | INF\n         | SUP\n         | MINUS SUP\n    \n    conclusion : exp MINUS SUP exp\n    \n    conclusion : list ins_exp MINUS SUP list\n    \n    ins_exp : NAME\n            | exp\n    \n    boolean : TRUE\n            | FALSE\n    \n    check : lang\n    \n    split : s_exp\n    \n    s_exp : s_exp COMA s_exp\n          | s_exp SEMICOLON s_exp\n    \n    s_exp : NAME OP exp CP\n    \n    s_exp : term\n          | VAR\n    \n    token : t_exp\n          | t_list\n          | t_statement\n          | t_state_ins\n    \n    t_exp : t_exp COMA t_exp\n          | t_exp SEMICOLON t_exp\n    \n    t_exp : NAME OP t_exp CP\n    \n    t_exp : t_term\n          | VAR\n    \n    t_term : NUM\n           | boolean\n           | t_list\n           | STRING\n    \n    t_list : OSB t_exp CSB\n           | INF t_exp SUP\n    \n    t_list : OSB CSB\n           | INF SUP\n    \n    t_statement : t_statement COMA t_statement\n    \n    t_statement : t_exp symb term\n                | t_exp symb VAR\n    \n    t_statement : t_exp IN NAME\n    \n    t_state_ins : t_list t_ins_exp\n    \n    t_ins_exp : t_ins\n              | t_exp\n    \n    t_ins : NAME\n    \n    isnumber : NUM\n    \n    isstring : STRING\n    \n    calc : c_exp\n    \n    calc : c_condition\n    \n    c_condition : c_exp comparator c_exp\n    \n    comparator : EQUAL EQUAL\n               | EXC EQUAL\n               | SUP\n               | SUP EQUAL\n               | INF\n               | INF EQUAL\n    \n    c_exp : NAME OP c_exp CP\n    \n    c_exp : c_exp COMA c_exp\n          | c_exp SEMICOLON c_exp\n    \n    c_exp : NUM\n          | boolean\n          | STRING\n    \n    c_exp : list\n    \n    c_list : OSB c_morelist CSB\n    \n    c_morelist : NUM COMA c_morelist\n               | NUM SEMICOLON c_morelist\n    \n    c_morelist : NUM\n    \n    c_list : OSB CSB\n    \n    c_list : INF c_morelist SUP\n    \n    state : st_list st_ins_exp\n    \n    st_ins_exp : st_ins\n    \n    st_ins_exp : st_exp\n    \n    st_ins : NAME\n    \n    st_exp : NAME OP t_exp CP\n    \n    st_list : OSB s_exp CSB\n            | INF s_exp SUP\n    '
    
_lr_action_items = {'CALC':([0,],[2,]),'CHECK':([0,],[3,]),'SPLIT':([0,],[4,]),'TOKEN':([0,],[5,]),'ISNUMBER':([0,],[6,]),'ISSTRING':([0,],[7,]),'STATE':([0,],[8,]),'$end':([1,9,10,11,13,14,15,16,17,18,21,22,27,28,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,49,50,51,52,53,54,55,56,69,91,92,93,94,95,99,101,102,103,104,105,108,109,110,116,117,119,126,127,134,135,137,138,139,140,141,142,145,146,150,151,156,157,158,162,163,165,],[0,-1,-74,-75,-86,-87,-88,-89,-38,-39,-2,-40,-18,-19,-20,-21,-22,-23,-3,-41,-45,-46,-4,-47,-48,-49,-50,-54,-55,-56,-57,-59,-5,-72,-6,-73,-7,-26,-58,-68,-69,-70,-71,-62,-63,-96,-97,-98,-99,-84,-85,-76,-24,-25,-9,-15,-16,-42,-43,-51,-52,-65,-66,-67,-64,-60,-61,-83,-8,-17,-44,-53,-100,-34,-35,]),'NAME':([2,3,4,5,19,20,41,47,48,57,58,59,60,61,62,65,66,67,69,72,73,75,76,77,83,84,85,86,87,88,90,96,97,99,101,111,112,113,114,116,117,118,121,145,146,147,148,149,160,],[12,29,36,44,29,29,95,44,44,105,36,36,12,12,12,-79,-81,12,-26,29,29,125,29,29,29,36,36,29,44,44,141,44,44,-62,-63,-77,-78,-80,-82,-24,-25,29,154,-60,-61,44,-101,-102,29,]),'NUM':([2,3,4,5,6,19,20,41,47,48,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,111,112,113,114,116,117,118,121,128,129,130,131,132,145,146,147,160,],[13,30,30,49,53,30,30,49,49,49,30,30,13,13,13,-79,-81,13,-26,30,30,30,30,30,-31,-32,30,30,30,30,49,49,30,49,49,-62,-63,-77,-78,-80,-82,-24,-25,30,30,-27,-28,-29,-30,-33,-60,-61,49,30,]),'STRING':([2,3,4,5,7,19,20,41,47,48,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,111,112,113,114,116,117,118,121,128,129,130,131,132,145,146,147,160,],[15,31,31,51,55,31,31,51,51,51,31,31,15,15,15,-79,-81,15,-26,31,31,31,31,31,-31,-32,31,31,31,31,51,51,31,51,51,-62,-63,-77,-78,-80,-82,-24,-25,31,31,-27,-28,-29,-30,-33,-60,-61,51,31,]),'TRUE':([2,3,4,5,19,20,41,47,48,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,111,112,113,114,116,117,118,121,128,129,130,131,132,145,146,147,160,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,-79,-81,17,-26,17,17,17,17,17,-31,-32,17,17,17,17,17,17,17,17,17,-62,-63,-77,-78,-80,-82,-24,-25,17,17,-27,-28,-29,-30,-33,-60,-61,17,17,]),'FALSE':([2,3,4,5,19,20,41,47,48,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,111,112,113,114,116,117,118,121,128,129,130,131,132,145,146,147,160,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,-79,-81,18,-26,18,18,18,18,18,-31,-32,18,18,18,18,18,18,18,18,18,-62,-63,-77,-78,-80,-82,-24,-25,18,18,-27,-28,-29,-30,-33,-60,-61,18,18,]),'OSB':([2,3,4,5,8,19,20,41,47,48,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,111,112,113,114,116,117,118,121,128,129,130,131,132,145,146,147,160,164,],[19,19,19,47,58,19,19,47,47,47,19,19,19,19,19,-79,-81,19,-26,19,19,19,19,19,-31,-32,19,19,19,19,47,47,19,47,47,-62,-63,-77,-78,-80,-82,-24,-25,19,19,-27,-28,-29,-30,-33,-60,-61,47,19,19,]),'INF':([2,3,4,5,8,10,13,14,15,16,17,18,19,20,26,27,28,30,31,32,33,40,41,45,46,47,48,49,50,51,58,59,60,61,62,65,66,67,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,91,96,97,99,101,108,109,111,112,113,114,116,117,118,121,126,127,128,129,130,131,132,137,138,143,145,146,147,150,156,158,160,164,],[20,20,20,48,59,66,-86,-87,-88,-89,-38,-39,20,20,80,-18,-19,-20,-21,-22,-23,80,48,-54,-55,48,48,-56,-57,-59,20,20,20,20,20,-79,-81,20,-26,20,20,20,20,20,-31,-32,20,20,20,20,48,48,20,-58,48,48,-62,-63,-84,-85,-77,-78,-80,-82,-24,-25,20,20,-15,-16,-27,-28,-29,-30,-33,-51,-52,80,-60,-61,48,-83,-17,-53,20,20,]),'MINUS':([3,17,18,23,24,25,26,27,28,30,31,32,33,40,41,45,46,49,50,51,69,71,91,99,101,116,117,120,121,122,123,124,125,126,127,137,138,143,145,146,153,154,155,156,158,],[24,-38,-39,71,72,-10,82,-18,-19,-20,-21,-22,-23,82,-58,-54,-55,-56,-57,-59,-26,118,-58,-62,-63,-24,-25,152,-23,-11,-12,-13,-14,-15,-16,-51,-52,82,-60,-61,161,-36,-37,-17,-53,]),'VAR':([3,4,5,19,20,41,47,48,58,59,69,72,73,74,76,77,80,81,83,84,85,86,87,88,89,96,97,99,101,116,117,118,121,128,129,130,131,132,145,146,147,160,],[28,38,46,28,28,46,46,46,38,38,-26,28,28,124,28,28,-31,-32,28,38,38,28,46,46,140,46,46,-62,-63,-24,-25,28,28,-27,-28,-29,-30,-33,-60,-61,46,28,]),'COMA':([10,13,14,15,16,17,18,25,26,27,28,30,31,32,33,35,37,38,40,41,42,45,46,49,50,51,68,69,70,91,94,98,99,100,101,106,107,108,109,110,115,116,117,120,121,122,123,124,125,126,127,133,134,135,136,137,138,139,140,141,142,143,144,145,146,150,155,156,157,158,159,163,],[60,-86,-87,-88,-89,-38,-39,73,76,-18,-19,-20,-21,-22,-23,84,-45,-46,87,-58,96,-54,-55,-56,-57,-59,76,-26,76,-58,87,87,-62,87,-63,84,84,60,60,60,60,-24,-25,76,-23,73,-12,-13,-14,76,76,76,84,84,76,87,87,-65,-66,-67,96,87,87,-60,-61,-83,76,-17,-44,-53,87,76,]),'SEMICOLON':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,35,37,38,40,41,45,46,49,50,51,68,69,70,91,94,98,99,100,101,106,107,108,109,110,115,116,117,120,121,126,127,133,134,135,136,137,138,143,144,145,146,150,155,156,157,158,159,163,],[61,-86,-87,-88,-89,-38,-39,77,-18,-19,-20,-21,-22,-23,85,-45,-46,88,-58,-54,-55,-56,-57,-59,77,-26,77,-58,88,88,-62,88,-63,85,85,61,61,61,61,-24,-25,77,-23,77,77,77,85,85,77,88,88,88,88,-60,-61,-83,77,-17,-44,-53,88,77,]),'EQUAL':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,40,41,45,46,49,50,51,63,64,65,66,69,78,79,80,81,91,99,101,108,109,116,117,126,127,137,138,143,145,146,150,156,158,],[63,-86,-87,-88,-89,-38,-39,78,-18,-19,-20,-21,-22,-23,78,-58,-54,-55,-56,-57,-59,111,112,113,114,-26,128,129,130,131,-58,-62,-63,-84,-85,-24,-25,-15,-16,-51,-52,78,-60,-61,-83,-17,-53,]),'EXC':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,40,41,45,46,49,50,51,69,91,99,101,108,109,116,117,126,127,137,138,143,145,146,150,156,158,],[64,-86,-87,-88,-89,-38,-39,79,-18,-19,-20,-21,-22,-23,79,-58,-54,-55,-56,-57,-59,-26,-58,-62,-63,-84,-85,-24,-25,-15,-16,-51,-52,79,-60,-61,-83,-17,-53,]),'SUP':([10,13,14,15,16,17,18,26,27,28,30,31,32,33,37,38,40,41,45,46,48,49,50,51,69,70,82,91,99,100,101,107,108,109,116,117,126,127,134,135,137,138,143,145,146,150,152,156,157,158,161,],[65,-86,-87,-88,-89,-38,-39,81,-18,-19,-20,-21,-22,-23,-45,-46,81,-58,-54,-55,101,-56,-57,-59,-26,117,132,-58,-62,146,-63,149,-84,-85,-24,-25,-15,-16,-42,-43,-51,-52,81,-60,-61,-83,160,-17,-44,-53,164,]),'OP':([12,29,36,44,95,105,154,],[67,83,86,97,97,147,83,]),'CP':([13,14,15,16,17,18,27,28,30,31,32,33,45,46,49,50,51,69,91,99,101,108,109,115,116,117,126,127,133,136,137,138,144,145,146,150,156,158,159,],[-86,-87,-88,-89,-38,-39,-18,-19,-20,-21,-22,-23,-54,-55,-56,-57,-59,-26,-58,-62,-63,-84,-85,150,-24,-25,-15,-16,156,157,-51,-52,158,-60,-61,-83,-17,-53,162,]),'IN':([17,18,26,27,28,30,31,32,33,40,41,45,46,49,50,51,69,91,99,101,116,117,126,127,137,138,143,145,146,156,158,],[-38,-39,75,-18,-19,-20,-21,-22,-23,90,-58,-54,-55,-56,-57,-59,-26,-58,-62,-63,-24,-25,-15,-16,-51,-52,90,-60,-61,-17,-53,]),'CSB':([17,18,19,27,28,30,31,32,33,37,38,45,46,47,49,50,51,68,69,91,98,99,101,106,116,117,126,127,134,135,137,138,145,146,156,157,158,],[-38,-39,69,-18,-19,-20,-21,-22,-23,-45,-46,-54,-55,99,-56,-57,-59,116,-26,-58,145,-62,-63,148,-24,-25,-15,-16,-42,-43,-51,-52,-60,-61,-17,-44,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'calc':([2,],[9,]),'c_exp':([2,60,61,62,67,],[10,108,109,110,115,]),'c_condition':([2,],[11,]),'boolean':([2,3,4,5,19,20,41,47,48,58,59,60,61,62,67,72,73,74,76,77,83,84,85,86,87,88,89,96,97,118,121,147,160,],[14,32,32,50,32,32,50,50,50,32,32,14,14,14,14,32,32,32,32,32,32,32,32,32,50,50,32,50,50,32,32,50,32,]),'list':([2,3,4,19,20,58,59,60,61,62,67,72,73,74,76,77,83,84,85,86,89,118,121,160,164,],[16,33,33,33,33,33,33,16,16,16,16,121,33,33,33,33,33,33,33,33,33,121,33,33,165,]),'check':([3,],[21,]),'lang':([3,],[22,]),'premises':([3,],[23,]),'statement':([3,73,],[25,122,]),'exp':([3,19,20,72,73,76,77,83,86,118,121,160,],[26,68,70,120,26,126,127,133,136,120,155,163,]),'term':([3,4,19,20,58,59,72,73,74,76,77,83,84,85,86,89,118,121,160,],[27,37,27,27,37,37,27,27,123,27,27,27,37,37,27,139,27,27,27,]),'split':([4,],[34,]),'s_exp':([4,58,59,84,85,],[35,106,107,134,135,]),'token':([5,],[39,]),'t_exp':([5,41,47,48,87,88,96,97,147,],[40,94,98,100,137,138,143,144,159,]),'t_list':([5,41,47,48,87,88,96,97,147,],[41,91,91,91,91,91,91,91,91,]),'t_statement':([5,96,],[42,142,]),'t_state_ins':([5,],[43,]),'t_term':([5,41,47,48,87,88,96,97,147,],[45,45,45,45,45,45,45,45,45,]),'isnumber':([6,],[52,]),'isstring':([7,],[54,]),'state':([8,],[56,]),'st_list':([8,],[57,]),'comparator':([10,],[62,]),'symb':([26,40,143,],[74,89,89,]),'t_ins_exp':([41,],[92,]),'t_ins':([41,],[93,]),'st_ins_exp':([57,],[102,]),'st_ins':([57,],[103,]),'st_exp':([57,],[104,]),'conclusion':([72,118,],[119,151,]),'ins_exp':([121,],[153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> CALC calc','start',2,'p_start','compile.py',156),
  ('start -> CHECK check','start',2,'p_start','compile.py',157),
  ('start -> SPLIT split','start',2,'p_start','compile.py',158),
  ('start -> TOKEN token','start',2,'p_start','compile.py',159),
  ('start -> ISNUMBER isnumber','start',2,'p_start','compile.py',160),
  ('start -> ISSTRING isstring','start',2,'p_start','compile.py',161),
  ('start -> STATE state','start',2,'p_start','compile.py',162),
  ('lang -> premises MINUS MINUS conclusion','lang',4,'p_lang','compile.py',168),
  ('lang -> MINUS MINUS conclusion','lang',3,'p_lang','compile.py',169),
  ('premises -> statement','premises',1,'p_premises','compile.py',177),
  ('statement -> statement COMA statement','statement',3,'p_statement1','compile.py',183),
  ('statement -> exp symb term','statement',3,'p_statement2','compile.py',190),
  ('statement -> exp symb VAR','statement',3,'p_statement2','compile.py',191),
  ('statement -> exp IN NAME','statement',3,'p_statement3','compile.py',198),
  ('exp -> exp COMA exp','exp',3,'p_exp1','compile.py',205),
  ('exp -> exp SEMICOLON exp','exp',3,'p_exp1','compile.py',206),
  ('exp -> NAME OP exp CP','exp',4,'p_exp2','compile.py',213),
  ('exp -> term','exp',1,'p_exp3','compile.py',220),
  ('exp -> VAR','exp',1,'p_exp3','compile.py',221),
  ('term -> NUM','term',1,'p_term','compile.py',228),
  ('term -> STRING','term',1,'p_term','compile.py',229),
  ('term -> boolean','term',1,'p_term','compile.py',230),
  ('term -> list','term',1,'p_term','compile.py',231),
  ('list -> OSB exp CSB','list',3,'p_list1','compile.py',238),
  ('list -> INF exp SUP','list',3,'p_list1','compile.py',239),
  ('list -> OSB CSB','list',2,'p_list2','compile.py',246),
  ('symb -> EQUAL EQUAL','symb',2,'p_symb','compile.py',253),
  ('symb -> EXC EQUAL','symb',2,'p_symb','compile.py',254),
  ('symb -> INF EQUAL','symb',2,'p_symb','compile.py',255),
  ('symb -> SUP EQUAL','symb',2,'p_symb','compile.py',256),
  ('symb -> INF','symb',1,'p_symb','compile.py',257),
  ('symb -> SUP','symb',1,'p_symb','compile.py',258),
  ('symb -> MINUS SUP','symb',2,'p_symb','compile.py',259),
  ('conclusion -> exp MINUS SUP exp','conclusion',4,'p_conclusion1','compile.py',266),
  ('conclusion -> list ins_exp MINUS SUP list','conclusion',5,'p_conclusion2','compile.py',273),
  ('ins_exp -> NAME','ins_exp',1,'p_ins_exp','compile.py',280),
  ('ins_exp -> exp','ins_exp',1,'p_ins_exp','compile.py',281),
  ('boolean -> TRUE','boolean',1,'p_boolean','compile.py',288),
  ('boolean -> FALSE','boolean',1,'p_boolean','compile.py',289),
  ('check -> lang','check',1,'p_check','compile.py',302),
  ('split -> s_exp','split',1,'p_split','compile.py',316),
  ('s_exp -> s_exp COMA s_exp','s_exp',3,'p_s_exp1','compile.py',323),
  ('s_exp -> s_exp SEMICOLON s_exp','s_exp',3,'p_s_exp1','compile.py',324),
  ('s_exp -> NAME OP exp CP','s_exp',4,'p_s_exp2','compile.py',331),
  ('s_exp -> term','s_exp',1,'p_s_exp3','compile.py',338),
  ('s_exp -> VAR','s_exp',1,'p_s_exp3','compile.py',339),
  ('token -> t_exp','token',1,'p_token','compile.py',353),
  ('token -> t_list','token',1,'p_token','compile.py',354),
  ('token -> t_statement','token',1,'p_token','compile.py',355),
  ('token -> t_state_ins','token',1,'p_token','compile.py',356),
  ('t_exp -> t_exp COMA t_exp','t_exp',3,'p_t_exp1','compile.py',362),
  ('t_exp -> t_exp SEMICOLON t_exp','t_exp',3,'p_t_exp1','compile.py',363),
  ('t_exp -> NAME OP t_exp CP','t_exp',4,'p_t_exp2','compile.py',370),
  ('t_exp -> t_term','t_exp',1,'p_t_exp3','compile.py',377),
  ('t_exp -> VAR','t_exp',1,'p_t_exp3','compile.py',378),
  ('t_term -> NUM','t_term',1,'p_t_term','compile.py',385),
  ('t_term -> boolean','t_term',1,'p_t_term','compile.py',386),
  ('t_term -> t_list','t_term',1,'p_t_term','compile.py',387),
  ('t_term -> STRING','t_term',1,'p_t_term','compile.py',388),
  ('t_list -> OSB t_exp CSB','t_list',3,'p_t_list1','compile.py',395),
  ('t_list -> INF t_exp SUP','t_list',3,'p_t_list1','compile.py',396),
  ('t_list -> OSB CSB','t_list',2,'p_t_list2','compile.py',403),
  ('t_list -> INF SUP','t_list',2,'p_t_list2','compile.py',404),
  ('t_statement -> t_statement COMA t_statement','t_statement',3,'p_t_statement1','compile.py',411),
  ('t_statement -> t_exp symb term','t_statement',3,'p_t_statement2','compile.py',418),
  ('t_statement -> t_exp symb VAR','t_statement',3,'p_t_statement2','compile.py',419),
  ('t_statement -> t_exp IN NAME','t_statement',3,'p_t_statement3','compile.py',426),
  ('t_state_ins -> t_list t_ins_exp','t_state_ins',2,'p_t_state_ins','compile.py',433),
  ('t_ins_exp -> t_ins','t_ins_exp',1,'p_t_ins_exp','compile.py',440),
  ('t_ins_exp -> t_exp','t_ins_exp',1,'p_t_ins_exp','compile.py',441),
  ('t_ins -> NAME','t_ins',1,'p_t_ins','compile.py',448),
  ('isnumber -> NUM','isnumber',1,'p_isnumber','compile.py',463),
  ('isstring -> STRING','isstring',1,'p_isstring','compile.py',479),
  ('calc -> c_exp','calc',1,'p_calc','compile.py',494),
  ('calc -> c_condition','calc',1,'p_calc2','compile.py',501),
  ('c_condition -> c_exp comparator c_exp','c_condition',3,'p_condition','compile.py',508),
  ('comparator -> EQUAL EQUAL','comparator',2,'p_comparator','compile.py',514),
  ('comparator -> EXC EQUAL','comparator',2,'p_comparator','compile.py',515),
  ('comparator -> SUP','comparator',1,'p_comparator','compile.py',516),
  ('comparator -> SUP EQUAL','comparator',2,'p_comparator','compile.py',517),
  ('comparator -> INF','comparator',1,'p_comparator','compile.py',518),
  ('comparator -> INF EQUAL','comparator',2,'p_comparator','compile.py',519),
  ('c_exp -> NAME OP c_exp CP','c_exp',4,'p_exp_operator','compile.py',525),
  ('c_exp -> c_exp COMA c_exp','c_exp',3,'p_exp_more','compile.py',532),
  ('c_exp -> c_exp SEMICOLON c_exp','c_exp',3,'p_exp_more','compile.py',533),
  ('c_exp -> NUM','c_exp',1,'p_exp_int','compile.py',539),
  ('c_exp -> boolean','c_exp',1,'p_exp_int','compile.py',540),
  ('c_exp -> STRING','c_exp',1,'p_exp_int','compile.py',541),
  ('c_exp -> list','c_exp',1,'p_exp_list','compile.py',547),
  ('c_list -> OSB c_morelist CSB','c_list',3,'p_exp_list1','compile.py',553),
  ('c_morelist -> NUM COMA c_morelist','c_morelist',3,'p_exp_list2','compile.py',559),
  ('c_morelist -> NUM SEMICOLON c_morelist','c_morelist',3,'p_exp_list2','compile.py',560),
  ('c_morelist -> NUM','c_morelist',1,'p_exp_list3','compile.py',566),
  ('c_list -> OSB CSB','c_list',2,'p_exp_list4','compile.py',572),
  ('c_list -> INF c_morelist SUP','c_list',3,'p_exp_list5','compile.py',578),
  ('state -> st_list st_ins_exp','state',2,'p_state','compile.py',591),
  ('st_ins_exp -> st_ins','st_ins_exp',1,'p_st_ins_exp1','compile.py',599),
  ('st_ins_exp -> st_exp','st_ins_exp',1,'p_st_ins_exp2','compile.py',605),
  ('st_ins -> NAME','st_ins',1,'p_st_ins','compile.py',612),
  ('st_exp -> NAME OP t_exp CP','st_exp',4,'p_st_exp','compile.py',619),
  ('st_list -> OSB s_exp CSB','st_list',3,'p_st_list','compile.py',631),
  ('st_list -> INF s_exp SUP','st_list',3,'p_st_list','compile.py',632),
]
