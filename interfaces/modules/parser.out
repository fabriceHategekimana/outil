Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ISLIST

Grammar

Rule 0     S' -> start
Rule 1     start -> CALC calc
Rule 2     start -> CHECK check
Rule 3     start -> SPLIT split
Rule 4     start -> TOKEN token
Rule 5     start -> ISNUMBER isnumber
Rule 6     start -> ISSTRING isstring
Rule 7     start -> STATE state
Rule 8     lang -> premises MINUS MINUS conclusion
Rule 9     lang -> MINUS MINUS conclusion
Rule 10    premises -> statement
Rule 11    statement -> statement COMA statement
Rule 12    statement -> exp symb term
Rule 13    statement -> exp symb VAR
Rule 14    statement -> exp IN NAME
Rule 15    exp -> exp COMA exp
Rule 16    exp -> exp SEMICOLON exp
Rule 17    exp -> NAME OP exp CP
Rule 18    exp -> term
Rule 19    exp -> VAR
Rule 20    term -> NUM
Rule 21    term -> STRING
Rule 22    term -> boolean
Rule 23    term -> list
Rule 24    list -> OSB exp CSB
Rule 25    list -> INF exp SUP
Rule 26    list -> OSB CSB
Rule 27    symb -> EQUAL EQUAL
Rule 28    symb -> EXC EQUAL
Rule 29    symb -> INF EQUAL
Rule 30    symb -> SUP EQUAL
Rule 31    symb -> INF
Rule 32    symb -> SUP
Rule 33    symb -> MINUS SUP
Rule 34    conclusion -> exp MINUS SUP exp
Rule 35    conclusion -> list ins_exp MINUS SUP list
Rule 36    ins_exp -> NAME
Rule 37    ins_exp -> exp
Rule 38    boolean -> TRUE
Rule 39    boolean -> FALSE
Rule 40    check -> lang
Rule 41    split -> s_exp
Rule 42    s_exp -> s_exp COMA s_exp
Rule 43    s_exp -> s_exp SEMICOLON s_exp
Rule 44    s_exp -> NAME OP exp CP
Rule 45    s_exp -> term
Rule 46    s_exp -> VAR
Rule 47    token -> t_exp
Rule 48    token -> t_list
Rule 49    token -> t_statement
Rule 50    token -> t_state_ins
Rule 51    t_exp -> t_exp COMA t_exp
Rule 52    t_exp -> t_exp SEMICOLON t_exp
Rule 53    t_exp -> NAME OP t_exp CP
Rule 54    t_exp -> t_term
Rule 55    t_exp -> VAR
Rule 56    t_term -> NUM
Rule 57    t_term -> boolean
Rule 58    t_term -> t_list
Rule 59    t_term -> STRING
Rule 60    t_list -> OSB t_exp CSB
Rule 61    t_list -> INF t_exp SUP
Rule 62    t_list -> OSB CSB
Rule 63    t_list -> INF SUP
Rule 64    t_statement -> t_statement COMA t_statement
Rule 65    t_statement -> t_exp symb term
Rule 66    t_statement -> t_exp symb VAR
Rule 67    t_statement -> t_exp IN NAME
Rule 68    t_state_ins -> t_list t_ins_exp
Rule 69    t_ins_exp -> t_ins
Rule 70    t_ins_exp -> t_exp
Rule 71    t_ins -> NAME
Rule 72    isnumber -> NUM
Rule 73    isstring -> STRING
Rule 74    calc -> c_exp
Rule 75    calc -> c_condition
Rule 76    c_condition -> c_exp comparator c_exp
Rule 77    comparator -> EQUAL EQUAL
Rule 78    comparator -> EXC EQUAL
Rule 79    comparator -> SUP
Rule 80    comparator -> SUP EQUAL
Rule 81    comparator -> INF
Rule 82    comparator -> INF EQUAL
Rule 83    c_exp -> NAME OP c_exp CP
Rule 84    c_exp -> c_exp COMA c_exp
Rule 85    c_exp -> c_exp SEMICOLON c_exp
Rule 86    c_exp -> NUM
Rule 87    c_exp -> boolean
Rule 88    c_exp -> STRING
Rule 89    c_exp -> list
Rule 90    c_list -> OSB c_morelist CSB
Rule 91    c_morelist -> NUM COMA c_morelist
Rule 92    c_morelist -> NUM SEMICOLON c_morelist
Rule 93    c_morelist -> NUM
Rule 94    c_list -> OSB CSB
Rule 95    c_list -> INF c_morelist SUP
Rule 96    state -> st_list st_ins_exp
Rule 97    st_ins_exp -> st_ins
Rule 98    st_ins_exp -> st_exp
Rule 99    st_ins -> NAME
Rule 100   st_exp -> NAME OP t_exp CP
Rule 101   st_list -> OSB s_exp CSB
Rule 102   st_list -> INF s_exp SUP

Terminals, with rules where they appear

CALC                 : 1
CHECK                : 2
COMA                 : 11 15 42 51 64 84 91
CP                   : 17 44 53 83 100
CSB                  : 24 26 60 62 90 94 101
EQUAL                : 27 27 28 29 30 77 77 78 80 82
EXC                  : 28 78
FALSE                : 39
IN                   : 14 67
INF                  : 25 29 31 61 63 81 82 95 102
ISLIST               : 
ISNUMBER             : 5
ISSTRING             : 6
MINUS                : 8 8 9 9 33 34 35
NAME                 : 14 17 36 44 53 67 71 83 99 100
NUM                  : 20 56 72 86 91 92 93
OP                   : 17 44 53 83 100
OSB                  : 24 26 60 62 90 94 101
SEMICOLON            : 16 43 52 85 92
SPLIT                : 3
STATE                : 7
STRING               : 21 59 73 88
SUP                  : 25 30 32 33 34 35 61 63 79 80 95 102
TOKEN                : 4
TRUE                 : 38
VAR                  : 13 19 46 55 66
error                : 

Nonterminals, with rules where they appear

boolean              : 22 57 87
c_condition          : 75
c_exp                : 74 76 76 83 84 84 85 85
c_list               : 
c_morelist           : 90 91 92 95
calc                 : 1
check                : 2
comparator           : 76
conclusion           : 8 9
exp                  : 12 13 14 15 15 16 16 17 24 25 34 34 37 44
ins_exp              : 35
isnumber             : 5
isstring             : 6
lang                 : 40
list                 : 23 35 35 89
premises             : 8
s_exp                : 41 42 42 43 43 101 102
split                : 3
st_exp               : 98
st_ins               : 97
st_ins_exp           : 96
st_list              : 96
start                : 0
state                : 7
statement            : 10 11 11
symb                 : 12 13 65 66
t_exp                : 47 51 51 52 52 53 60 61 65 66 67 70 100
t_ins                : 69
t_ins_exp            : 68
t_list               : 48 58 68
t_state_ins          : 50
t_statement          : 49 64 64
t_term               : 54
term                 : 12 18 45 65
token                : 4

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . CALC calc
    (2) start -> . CHECK check
    (3) start -> . SPLIT split
    (4) start -> . TOKEN token
    (5) start -> . ISNUMBER isnumber
    (6) start -> . ISSTRING isstring
    (7) start -> . STATE state

    CALC            shift and go to state 2
    CHECK           shift and go to state 3
    SPLIT           shift and go to state 4
    TOKEN           shift and go to state 5
    ISNUMBER        shift and go to state 6
    ISSTRING        shift and go to state 7
    STATE           shift and go to state 8

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> CALC . calc
    (74) calc -> . c_exp
    (75) calc -> . c_condition
    (83) c_exp -> . NAME OP c_exp CP
    (84) c_exp -> . c_exp COMA c_exp
    (85) c_exp -> . c_exp SEMICOLON c_exp
    (86) c_exp -> . NUM
    (87) c_exp -> . boolean
    (88) c_exp -> . STRING
    (89) c_exp -> . list
    (76) c_condition -> . c_exp comparator c_exp
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 12
    NUM             shift and go to state 13
    STRING          shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    calc                           shift and go to state 9
    c_exp                          shift and go to state 10
    c_condition                    shift and go to state 11
    boolean                        shift and go to state 14
    list                           shift and go to state 16

state 3

    (2) start -> CHECK . check
    (40) check -> . lang
    (8) lang -> . premises MINUS MINUS conclusion
    (9) lang -> . MINUS MINUS conclusion
    (10) premises -> . statement
    (11) statement -> . statement COMA statement
    (12) statement -> . exp symb term
    (13) statement -> . exp symb VAR
    (14) statement -> . exp IN NAME
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    MINUS           shift and go to state 24
    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    check                          shift and go to state 21
    lang                           shift and go to state 22
    premises                       shift and go to state 23
    statement                      shift and go to state 25
    exp                            shift and go to state 26
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 4

    (3) start -> SPLIT . split
    (41) split -> . s_exp
    (42) s_exp -> . s_exp COMA s_exp
    (43) s_exp -> . s_exp SEMICOLON s_exp
    (44) s_exp -> . NAME OP exp CP
    (45) s_exp -> . term
    (46) s_exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 36
    VAR             shift and go to state 38
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    split                          shift and go to state 34
    s_exp                          shift and go to state 35
    term                           shift and go to state 37
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 5

    (4) start -> TOKEN . token
    (47) token -> . t_exp
    (48) token -> . t_list
    (49) token -> . t_statement
    (50) token -> . t_state_ins
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP
    (64) t_statement -> . t_statement COMA t_statement
    (65) t_statement -> . t_exp symb term
    (66) t_statement -> . t_exp symb VAR
    (67) t_statement -> . t_exp IN NAME
    (68) t_state_ins -> . t_list t_ins_exp
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    OSB             shift and go to state 47
    INF             shift and go to state 48
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    token                          shift and go to state 39
    t_exp                          shift and go to state 40
    t_list                         shift and go to state 41
    t_statement                    shift and go to state 42
    t_state_ins                    shift and go to state 43
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50

state 6

    (5) start -> ISNUMBER . isnumber
    (72) isnumber -> . NUM

    NUM             shift and go to state 53

    isnumber                       shift and go to state 52

state 7

    (6) start -> ISSTRING . isstring
    (73) isstring -> . STRING

    STRING          shift and go to state 55

    isstring                       shift and go to state 54

state 8

    (7) start -> STATE . state
    (96) state -> . st_list st_ins_exp
    (101) st_list -> . OSB s_exp CSB
    (102) st_list -> . INF s_exp SUP

    OSB             shift and go to state 58
    INF             shift and go to state 59

    state                          shift and go to state 56
    st_list                        shift and go to state 57

state 9

    (1) start -> CALC calc .

    $end            reduce using rule 1 (start -> CALC calc .)


state 10

    (74) calc -> c_exp .
    (84) c_exp -> c_exp . COMA c_exp
    (85) c_exp -> c_exp . SEMICOLON c_exp
    (76) c_condition -> c_exp . comparator c_exp
    (77) comparator -> . EQUAL EQUAL
    (78) comparator -> . EXC EQUAL
    (79) comparator -> . SUP
    (80) comparator -> . SUP EQUAL
    (81) comparator -> . INF
    (82) comparator -> . INF EQUAL

    $end            reduce using rule 74 (calc -> c_exp .)
    COMA            shift and go to state 60
    SEMICOLON       shift and go to state 61
    EQUAL           shift and go to state 63
    EXC             shift and go to state 64
    SUP             shift and go to state 65
    INF             shift and go to state 66

    comparator                     shift and go to state 62

state 11

    (75) calc -> c_condition .

    $end            reduce using rule 75 (calc -> c_condition .)


state 12

    (83) c_exp -> NAME . OP c_exp CP

    OP              shift and go to state 67


state 13

    (86) c_exp -> NUM .

    COMA            reduce using rule 86 (c_exp -> NUM .)
    SEMICOLON       reduce using rule 86 (c_exp -> NUM .)
    EQUAL           reduce using rule 86 (c_exp -> NUM .)
    EXC             reduce using rule 86 (c_exp -> NUM .)
    SUP             reduce using rule 86 (c_exp -> NUM .)
    INF             reduce using rule 86 (c_exp -> NUM .)
    $end            reduce using rule 86 (c_exp -> NUM .)
    CP              reduce using rule 86 (c_exp -> NUM .)


state 14

    (87) c_exp -> boolean .

    COMA            reduce using rule 87 (c_exp -> boolean .)
    SEMICOLON       reduce using rule 87 (c_exp -> boolean .)
    EQUAL           reduce using rule 87 (c_exp -> boolean .)
    EXC             reduce using rule 87 (c_exp -> boolean .)
    SUP             reduce using rule 87 (c_exp -> boolean .)
    INF             reduce using rule 87 (c_exp -> boolean .)
    $end            reduce using rule 87 (c_exp -> boolean .)
    CP              reduce using rule 87 (c_exp -> boolean .)


state 15

    (88) c_exp -> STRING .

    COMA            reduce using rule 88 (c_exp -> STRING .)
    SEMICOLON       reduce using rule 88 (c_exp -> STRING .)
    EQUAL           reduce using rule 88 (c_exp -> STRING .)
    EXC             reduce using rule 88 (c_exp -> STRING .)
    SUP             reduce using rule 88 (c_exp -> STRING .)
    INF             reduce using rule 88 (c_exp -> STRING .)
    $end            reduce using rule 88 (c_exp -> STRING .)
    CP              reduce using rule 88 (c_exp -> STRING .)


state 16

    (89) c_exp -> list .

    COMA            reduce using rule 89 (c_exp -> list .)
    SEMICOLON       reduce using rule 89 (c_exp -> list .)
    EQUAL           reduce using rule 89 (c_exp -> list .)
    EXC             reduce using rule 89 (c_exp -> list .)
    SUP             reduce using rule 89 (c_exp -> list .)
    INF             reduce using rule 89 (c_exp -> list .)
    $end            reduce using rule 89 (c_exp -> list .)
    CP              reduce using rule 89 (c_exp -> list .)


state 17

    (38) boolean -> TRUE .

    COMA            reduce using rule 38 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 38 (boolean -> TRUE .)
    EQUAL           reduce using rule 38 (boolean -> TRUE .)
    EXC             reduce using rule 38 (boolean -> TRUE .)
    SUP             reduce using rule 38 (boolean -> TRUE .)
    INF             reduce using rule 38 (boolean -> TRUE .)
    $end            reduce using rule 38 (boolean -> TRUE .)
    IN              reduce using rule 38 (boolean -> TRUE .)
    MINUS           reduce using rule 38 (boolean -> TRUE .)
    CSB             reduce using rule 38 (boolean -> TRUE .)
    CP              reduce using rule 38 (boolean -> TRUE .)


state 18

    (39) boolean -> FALSE .

    COMA            reduce using rule 39 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 39 (boolean -> FALSE .)
    EQUAL           reduce using rule 39 (boolean -> FALSE .)
    EXC             reduce using rule 39 (boolean -> FALSE .)
    SUP             reduce using rule 39 (boolean -> FALSE .)
    INF             reduce using rule 39 (boolean -> FALSE .)
    $end            reduce using rule 39 (boolean -> FALSE .)
    IN              reduce using rule 39 (boolean -> FALSE .)
    MINUS           reduce using rule 39 (boolean -> FALSE .)
    CSB             reduce using rule 39 (boolean -> FALSE .)
    CP              reduce using rule 39 (boolean -> FALSE .)


state 19

    (24) list -> OSB . exp CSB
    (26) list -> OSB . CSB
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    CSB             shift and go to state 69
    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 68
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 20

    (25) list -> INF . exp SUP
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 70
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 21

    (2) start -> CHECK check .

    $end            reduce using rule 2 (start -> CHECK check .)


state 22

    (40) check -> lang .

    $end            reduce using rule 40 (check -> lang .)


state 23

    (8) lang -> premises . MINUS MINUS conclusion

    MINUS           shift and go to state 71


state 24

    (9) lang -> MINUS . MINUS conclusion

    MINUS           shift and go to state 72


state 25

    (10) premises -> statement .
    (11) statement -> statement . COMA statement

    MINUS           reduce using rule 10 (premises -> statement .)
    COMA            shift and go to state 73


state 26

    (12) statement -> exp . symb term
    (13) statement -> exp . symb VAR
    (14) statement -> exp . IN NAME
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp
    (27) symb -> . EQUAL EQUAL
    (28) symb -> . EXC EQUAL
    (29) symb -> . INF EQUAL
    (30) symb -> . SUP EQUAL
    (31) symb -> . INF
    (32) symb -> . SUP
    (33) symb -> . MINUS SUP

    IN              shift and go to state 75
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77
    EQUAL           shift and go to state 78
    EXC             shift and go to state 79
    INF             shift and go to state 80
    SUP             shift and go to state 81
    MINUS           shift and go to state 82

    symb                           shift and go to state 74

state 27

    (18) exp -> term .

    IN              reduce using rule 18 (exp -> term .)
    COMA            reduce using rule 18 (exp -> term .)
    SEMICOLON       reduce using rule 18 (exp -> term .)
    EQUAL           reduce using rule 18 (exp -> term .)
    EXC             reduce using rule 18 (exp -> term .)
    INF             reduce using rule 18 (exp -> term .)
    SUP             reduce using rule 18 (exp -> term .)
    MINUS           reduce using rule 18 (exp -> term .)
    CSB             reduce using rule 18 (exp -> term .)
    CP              reduce using rule 18 (exp -> term .)
    $end            reduce using rule 18 (exp -> term .)


state 28

    (19) exp -> VAR .

    IN              reduce using rule 19 (exp -> VAR .)
    COMA            reduce using rule 19 (exp -> VAR .)
    SEMICOLON       reduce using rule 19 (exp -> VAR .)
    EQUAL           reduce using rule 19 (exp -> VAR .)
    EXC             reduce using rule 19 (exp -> VAR .)
    INF             reduce using rule 19 (exp -> VAR .)
    SUP             reduce using rule 19 (exp -> VAR .)
    MINUS           reduce using rule 19 (exp -> VAR .)
    CSB             reduce using rule 19 (exp -> VAR .)
    CP              reduce using rule 19 (exp -> VAR .)
    $end            reduce using rule 19 (exp -> VAR .)


state 29

    (17) exp -> NAME . OP exp CP

    OP              shift and go to state 83


state 30

    (20) term -> NUM .

    IN              reduce using rule 20 (term -> NUM .)
    COMA            reduce using rule 20 (term -> NUM .)
    SEMICOLON       reduce using rule 20 (term -> NUM .)
    EQUAL           reduce using rule 20 (term -> NUM .)
    EXC             reduce using rule 20 (term -> NUM .)
    INF             reduce using rule 20 (term -> NUM .)
    SUP             reduce using rule 20 (term -> NUM .)
    MINUS           reduce using rule 20 (term -> NUM .)
    $end            reduce using rule 20 (term -> NUM .)
    CSB             reduce using rule 20 (term -> NUM .)
    CP              reduce using rule 20 (term -> NUM .)


state 31

    (21) term -> STRING .

    IN              reduce using rule 21 (term -> STRING .)
    COMA            reduce using rule 21 (term -> STRING .)
    SEMICOLON       reduce using rule 21 (term -> STRING .)
    EQUAL           reduce using rule 21 (term -> STRING .)
    EXC             reduce using rule 21 (term -> STRING .)
    INF             reduce using rule 21 (term -> STRING .)
    SUP             reduce using rule 21 (term -> STRING .)
    MINUS           reduce using rule 21 (term -> STRING .)
    $end            reduce using rule 21 (term -> STRING .)
    CSB             reduce using rule 21 (term -> STRING .)
    CP              reduce using rule 21 (term -> STRING .)


state 32

    (22) term -> boolean .

    IN              reduce using rule 22 (term -> boolean .)
    COMA            reduce using rule 22 (term -> boolean .)
    SEMICOLON       reduce using rule 22 (term -> boolean .)
    EQUAL           reduce using rule 22 (term -> boolean .)
    EXC             reduce using rule 22 (term -> boolean .)
    INF             reduce using rule 22 (term -> boolean .)
    SUP             reduce using rule 22 (term -> boolean .)
    MINUS           reduce using rule 22 (term -> boolean .)
    $end            reduce using rule 22 (term -> boolean .)
    CSB             reduce using rule 22 (term -> boolean .)
    CP              reduce using rule 22 (term -> boolean .)


state 33

    (23) term -> list .

    IN              reduce using rule 23 (term -> list .)
    COMA            reduce using rule 23 (term -> list .)
    SEMICOLON       reduce using rule 23 (term -> list .)
    EQUAL           reduce using rule 23 (term -> list .)
    EXC             reduce using rule 23 (term -> list .)
    INF             reduce using rule 23 (term -> list .)
    SUP             reduce using rule 23 (term -> list .)
    MINUS           reduce using rule 23 (term -> list .)
    $end            reduce using rule 23 (term -> list .)
    CSB             reduce using rule 23 (term -> list .)
    CP              reduce using rule 23 (term -> list .)


state 34

    (3) start -> SPLIT split .

    $end            reduce using rule 3 (start -> SPLIT split .)


state 35

    (41) split -> s_exp .
    (42) s_exp -> s_exp . COMA s_exp
    (43) s_exp -> s_exp . SEMICOLON s_exp

    $end            reduce using rule 41 (split -> s_exp .)
    COMA            shift and go to state 84
    SEMICOLON       shift and go to state 85


state 36

    (44) s_exp -> NAME . OP exp CP

    OP              shift and go to state 86


state 37

    (45) s_exp -> term .

    COMA            reduce using rule 45 (s_exp -> term .)
    SEMICOLON       reduce using rule 45 (s_exp -> term .)
    $end            reduce using rule 45 (s_exp -> term .)
    CSB             reduce using rule 45 (s_exp -> term .)
    SUP             reduce using rule 45 (s_exp -> term .)


state 38

    (46) s_exp -> VAR .

    COMA            reduce using rule 46 (s_exp -> VAR .)
    SEMICOLON       reduce using rule 46 (s_exp -> VAR .)
    $end            reduce using rule 46 (s_exp -> VAR .)
    CSB             reduce using rule 46 (s_exp -> VAR .)
    SUP             reduce using rule 46 (s_exp -> VAR .)


state 39

    (4) start -> TOKEN token .

    $end            reduce using rule 4 (start -> TOKEN token .)


state 40

    (47) token -> t_exp .
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp
    (65) t_statement -> t_exp . symb term
    (66) t_statement -> t_exp . symb VAR
    (67) t_statement -> t_exp . IN NAME
    (27) symb -> . EQUAL EQUAL
    (28) symb -> . EXC EQUAL
    (29) symb -> . INF EQUAL
    (30) symb -> . SUP EQUAL
    (31) symb -> . INF
    (32) symb -> . SUP
    (33) symb -> . MINUS SUP

    $end            reduce using rule 47 (token -> t_exp .)
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88
    IN              shift and go to state 90
    EQUAL           shift and go to state 78
    EXC             shift and go to state 79
    INF             shift and go to state 80
    SUP             shift and go to state 81
    MINUS           shift and go to state 82

    symb                           shift and go to state 89

state 41

    (48) token -> t_list .
    (68) t_state_ins -> t_list . t_ins_exp
    (58) t_term -> t_list .
    (69) t_ins_exp -> . t_ins
    (70) t_ins_exp -> . t_exp
    (71) t_ins -> . NAME
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

  ! reduce/reduce conflict for $end resolved using rule 48 (token -> t_list .)
  ! shift/reduce conflict for INF resolved as shift
    $end            reduce using rule 48 (token -> t_list .)
    COMA            reduce using rule 58 (t_term -> t_list .)
    SEMICOLON       reduce using rule 58 (t_term -> t_list .)
    IN              reduce using rule 58 (t_term -> t_list .)
    EQUAL           reduce using rule 58 (t_term -> t_list .)
    EXC             reduce using rule 58 (t_term -> t_list .)
    SUP             reduce using rule 58 (t_term -> t_list .)
    MINUS           reduce using rule 58 (t_term -> t_list .)
    NAME            shift and go to state 95
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

  ! INF             [ reduce using rule 58 (t_term -> t_list .) ]
  ! $end            [ reduce using rule 58 (t_term -> t_list .) ]

    t_list                         shift and go to state 91
    t_ins_exp                      shift and go to state 92
    t_ins                          shift and go to state 93
    t_exp                          shift and go to state 94
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50

state 42

    (49) token -> t_statement .
    (64) t_statement -> t_statement . COMA t_statement

    $end            reduce using rule 49 (token -> t_statement .)
    COMA            shift and go to state 96


state 43

    (50) token -> t_state_ins .

    $end            reduce using rule 50 (token -> t_state_ins .)


state 44

    (53) t_exp -> NAME . OP t_exp CP

    OP              shift and go to state 97


state 45

    (54) t_exp -> t_term .

    COMA            reduce using rule 54 (t_exp -> t_term .)
    SEMICOLON       reduce using rule 54 (t_exp -> t_term .)
    IN              reduce using rule 54 (t_exp -> t_term .)
    EQUAL           reduce using rule 54 (t_exp -> t_term .)
    EXC             reduce using rule 54 (t_exp -> t_term .)
    INF             reduce using rule 54 (t_exp -> t_term .)
    SUP             reduce using rule 54 (t_exp -> t_term .)
    MINUS           reduce using rule 54 (t_exp -> t_term .)
    $end            reduce using rule 54 (t_exp -> t_term .)
    CSB             reduce using rule 54 (t_exp -> t_term .)
    CP              reduce using rule 54 (t_exp -> t_term .)


state 46

    (55) t_exp -> VAR .

    COMA            reduce using rule 55 (t_exp -> VAR .)
    SEMICOLON       reduce using rule 55 (t_exp -> VAR .)
    IN              reduce using rule 55 (t_exp -> VAR .)
    EQUAL           reduce using rule 55 (t_exp -> VAR .)
    EXC             reduce using rule 55 (t_exp -> VAR .)
    INF             reduce using rule 55 (t_exp -> VAR .)
    SUP             reduce using rule 55 (t_exp -> VAR .)
    MINUS           reduce using rule 55 (t_exp -> VAR .)
    $end            reduce using rule 55 (t_exp -> VAR .)
    CSB             reduce using rule 55 (t_exp -> VAR .)
    CP              reduce using rule 55 (t_exp -> VAR .)


state 47

    (60) t_list -> OSB . t_exp CSB
    (62) t_list -> OSB . CSB
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    CSB             shift and go to state 99
    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 98
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 48

    (61) t_list -> INF . t_exp SUP
    (63) t_list -> INF . SUP
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    SUP             shift and go to state 101
    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 100
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 49

    (56) t_term -> NUM .

    COMA            reduce using rule 56 (t_term -> NUM .)
    SEMICOLON       reduce using rule 56 (t_term -> NUM .)
    IN              reduce using rule 56 (t_term -> NUM .)
    EQUAL           reduce using rule 56 (t_term -> NUM .)
    EXC             reduce using rule 56 (t_term -> NUM .)
    INF             reduce using rule 56 (t_term -> NUM .)
    SUP             reduce using rule 56 (t_term -> NUM .)
    MINUS           reduce using rule 56 (t_term -> NUM .)
    $end            reduce using rule 56 (t_term -> NUM .)
    CSB             reduce using rule 56 (t_term -> NUM .)
    CP              reduce using rule 56 (t_term -> NUM .)


state 50

    (57) t_term -> boolean .

    COMA            reduce using rule 57 (t_term -> boolean .)
    SEMICOLON       reduce using rule 57 (t_term -> boolean .)
    IN              reduce using rule 57 (t_term -> boolean .)
    EQUAL           reduce using rule 57 (t_term -> boolean .)
    EXC             reduce using rule 57 (t_term -> boolean .)
    INF             reduce using rule 57 (t_term -> boolean .)
    SUP             reduce using rule 57 (t_term -> boolean .)
    MINUS           reduce using rule 57 (t_term -> boolean .)
    $end            reduce using rule 57 (t_term -> boolean .)
    CSB             reduce using rule 57 (t_term -> boolean .)
    CP              reduce using rule 57 (t_term -> boolean .)


state 51

    (59) t_term -> STRING .

    COMA            reduce using rule 59 (t_term -> STRING .)
    SEMICOLON       reduce using rule 59 (t_term -> STRING .)
    IN              reduce using rule 59 (t_term -> STRING .)
    EQUAL           reduce using rule 59 (t_term -> STRING .)
    EXC             reduce using rule 59 (t_term -> STRING .)
    INF             reduce using rule 59 (t_term -> STRING .)
    SUP             reduce using rule 59 (t_term -> STRING .)
    MINUS           reduce using rule 59 (t_term -> STRING .)
    $end            reduce using rule 59 (t_term -> STRING .)
    CSB             reduce using rule 59 (t_term -> STRING .)
    CP              reduce using rule 59 (t_term -> STRING .)


state 52

    (5) start -> ISNUMBER isnumber .

    $end            reduce using rule 5 (start -> ISNUMBER isnumber .)


state 53

    (72) isnumber -> NUM .

    $end            reduce using rule 72 (isnumber -> NUM .)


state 54

    (6) start -> ISSTRING isstring .

    $end            reduce using rule 6 (start -> ISSTRING isstring .)


state 55

    (73) isstring -> STRING .

    $end            reduce using rule 73 (isstring -> STRING .)


state 56

    (7) start -> STATE state .

    $end            reduce using rule 7 (start -> STATE state .)


state 57

    (96) state -> st_list . st_ins_exp
    (97) st_ins_exp -> . st_ins
    (98) st_ins_exp -> . st_exp
    (99) st_ins -> . NAME
    (100) st_exp -> . NAME OP t_exp CP

    NAME            shift and go to state 105

    st_ins_exp                     shift and go to state 102
    st_ins                         shift and go to state 103
    st_exp                         shift and go to state 104

state 58

    (101) st_list -> OSB . s_exp CSB
    (42) s_exp -> . s_exp COMA s_exp
    (43) s_exp -> . s_exp SEMICOLON s_exp
    (44) s_exp -> . NAME OP exp CP
    (45) s_exp -> . term
    (46) s_exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 36
    VAR             shift and go to state 38
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    s_exp                          shift and go to state 106
    term                           shift and go to state 37
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 59

    (102) st_list -> INF . s_exp SUP
    (42) s_exp -> . s_exp COMA s_exp
    (43) s_exp -> . s_exp SEMICOLON s_exp
    (44) s_exp -> . NAME OP exp CP
    (45) s_exp -> . term
    (46) s_exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 36
    VAR             shift and go to state 38
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    s_exp                          shift and go to state 107
    term                           shift and go to state 37
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 60

    (84) c_exp -> c_exp COMA . c_exp
    (83) c_exp -> . NAME OP c_exp CP
    (84) c_exp -> . c_exp COMA c_exp
    (85) c_exp -> . c_exp SEMICOLON c_exp
    (86) c_exp -> . NUM
    (87) c_exp -> . boolean
    (88) c_exp -> . STRING
    (89) c_exp -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 12
    NUM             shift and go to state 13
    STRING          shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    c_exp                          shift and go to state 108
    boolean                        shift and go to state 14
    list                           shift and go to state 16

state 61

    (85) c_exp -> c_exp SEMICOLON . c_exp
    (83) c_exp -> . NAME OP c_exp CP
    (84) c_exp -> . c_exp COMA c_exp
    (85) c_exp -> . c_exp SEMICOLON c_exp
    (86) c_exp -> . NUM
    (87) c_exp -> . boolean
    (88) c_exp -> . STRING
    (89) c_exp -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 12
    NUM             shift and go to state 13
    STRING          shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    c_exp                          shift and go to state 109
    boolean                        shift and go to state 14
    list                           shift and go to state 16

state 62

    (76) c_condition -> c_exp comparator . c_exp
    (83) c_exp -> . NAME OP c_exp CP
    (84) c_exp -> . c_exp COMA c_exp
    (85) c_exp -> . c_exp SEMICOLON c_exp
    (86) c_exp -> . NUM
    (87) c_exp -> . boolean
    (88) c_exp -> . STRING
    (89) c_exp -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 12
    NUM             shift and go to state 13
    STRING          shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    c_exp                          shift and go to state 110
    boolean                        shift and go to state 14
    list                           shift and go to state 16

state 63

    (77) comparator -> EQUAL . EQUAL

    EQUAL           shift and go to state 111


state 64

    (78) comparator -> EXC . EQUAL

    EQUAL           shift and go to state 112


state 65

    (79) comparator -> SUP .
    (80) comparator -> SUP . EQUAL

    NAME            reduce using rule 79 (comparator -> SUP .)
    NUM             reduce using rule 79 (comparator -> SUP .)
    STRING          reduce using rule 79 (comparator -> SUP .)
    TRUE            reduce using rule 79 (comparator -> SUP .)
    FALSE           reduce using rule 79 (comparator -> SUP .)
    OSB             reduce using rule 79 (comparator -> SUP .)
    INF             reduce using rule 79 (comparator -> SUP .)
    EQUAL           shift and go to state 113


state 66

    (81) comparator -> INF .
    (82) comparator -> INF . EQUAL

    NAME            reduce using rule 81 (comparator -> INF .)
    NUM             reduce using rule 81 (comparator -> INF .)
    STRING          reduce using rule 81 (comparator -> INF .)
    TRUE            reduce using rule 81 (comparator -> INF .)
    FALSE           reduce using rule 81 (comparator -> INF .)
    OSB             reduce using rule 81 (comparator -> INF .)
    INF             reduce using rule 81 (comparator -> INF .)
    EQUAL           shift and go to state 114


state 67

    (83) c_exp -> NAME OP . c_exp CP
    (83) c_exp -> . NAME OP c_exp CP
    (84) c_exp -> . c_exp COMA c_exp
    (85) c_exp -> . c_exp SEMICOLON c_exp
    (86) c_exp -> . NUM
    (87) c_exp -> . boolean
    (88) c_exp -> . STRING
    (89) c_exp -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 12
    NUM             shift and go to state 13
    STRING          shift and go to state 15
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    c_exp                          shift and go to state 115
    boolean                        shift and go to state 14
    list                           shift and go to state 16

state 68

    (24) list -> OSB exp . CSB
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    CSB             shift and go to state 116
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 69

    (26) list -> OSB CSB .

    COMA            reduce using rule 26 (list -> OSB CSB .)
    SEMICOLON       reduce using rule 26 (list -> OSB CSB .)
    EQUAL           reduce using rule 26 (list -> OSB CSB .)
    EXC             reduce using rule 26 (list -> OSB CSB .)
    SUP             reduce using rule 26 (list -> OSB CSB .)
    INF             reduce using rule 26 (list -> OSB CSB .)
    $end            reduce using rule 26 (list -> OSB CSB .)
    IN              reduce using rule 26 (list -> OSB CSB .)
    MINUS           reduce using rule 26 (list -> OSB CSB .)
    CSB             reduce using rule 26 (list -> OSB CSB .)
    CP              reduce using rule 26 (list -> OSB CSB .)
    NAME            reduce using rule 26 (list -> OSB CSB .)
    VAR             reduce using rule 26 (list -> OSB CSB .)
    NUM             reduce using rule 26 (list -> OSB CSB .)
    STRING          reduce using rule 26 (list -> OSB CSB .)
    TRUE            reduce using rule 26 (list -> OSB CSB .)
    FALSE           reduce using rule 26 (list -> OSB CSB .)
    OSB             reduce using rule 26 (list -> OSB CSB .)


state 70

    (25) list -> INF exp . SUP
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    SUP             shift and go to state 117
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 71

    (8) lang -> premises MINUS . MINUS conclusion

    MINUS           shift and go to state 118


state 72

    (9) lang -> MINUS MINUS . conclusion
    (34) conclusion -> . exp MINUS SUP exp
    (35) conclusion -> . list ins_exp MINUS SUP list
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    OSB             shift and go to state 19
    INF             shift and go to state 20
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    conclusion                     shift and go to state 119
    exp                            shift and go to state 120
    list                           shift and go to state 121
    term                           shift and go to state 27
    boolean                        shift and go to state 32

state 73

    (11) statement -> statement COMA . statement
    (11) statement -> . statement COMA statement
    (12) statement -> . exp symb term
    (13) statement -> . exp symb VAR
    (14) statement -> . exp IN NAME
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    statement                      shift and go to state 122
    exp                            shift and go to state 26
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 74

    (12) statement -> exp symb . term
    (13) statement -> exp symb . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    VAR             shift and go to state 124
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    term                           shift and go to state 123
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 75

    (14) statement -> exp IN . NAME

    NAME            shift and go to state 125


state 76

    (15) exp -> exp COMA . exp
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 126
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 77

    (16) exp -> exp SEMICOLON . exp
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 127
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 78

    (27) symb -> EQUAL . EQUAL

    EQUAL           shift and go to state 128


state 79

    (28) symb -> EXC . EQUAL

    EQUAL           shift and go to state 129


state 80

    (29) symb -> INF . EQUAL
    (31) symb -> INF .

    EQUAL           shift and go to state 130
    VAR             reduce using rule 31 (symb -> INF .)
    NUM             reduce using rule 31 (symb -> INF .)
    STRING          reduce using rule 31 (symb -> INF .)
    TRUE            reduce using rule 31 (symb -> INF .)
    FALSE           reduce using rule 31 (symb -> INF .)
    OSB             reduce using rule 31 (symb -> INF .)
    INF             reduce using rule 31 (symb -> INF .)


state 81

    (30) symb -> SUP . EQUAL
    (32) symb -> SUP .

    EQUAL           shift and go to state 131
    VAR             reduce using rule 32 (symb -> SUP .)
    NUM             reduce using rule 32 (symb -> SUP .)
    STRING          reduce using rule 32 (symb -> SUP .)
    TRUE            reduce using rule 32 (symb -> SUP .)
    FALSE           reduce using rule 32 (symb -> SUP .)
    OSB             reduce using rule 32 (symb -> SUP .)
    INF             reduce using rule 32 (symb -> SUP .)


state 82

    (33) symb -> MINUS . SUP

    SUP             shift and go to state 132


state 83

    (17) exp -> NAME OP . exp CP
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 133
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 84

    (42) s_exp -> s_exp COMA . s_exp
    (42) s_exp -> . s_exp COMA s_exp
    (43) s_exp -> . s_exp SEMICOLON s_exp
    (44) s_exp -> . NAME OP exp CP
    (45) s_exp -> . term
    (46) s_exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 36
    VAR             shift and go to state 38
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    s_exp                          shift and go to state 134
    term                           shift and go to state 37
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 85

    (43) s_exp -> s_exp SEMICOLON . s_exp
    (42) s_exp -> . s_exp COMA s_exp
    (43) s_exp -> . s_exp SEMICOLON s_exp
    (44) s_exp -> . NAME OP exp CP
    (45) s_exp -> . term
    (46) s_exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 36
    VAR             shift and go to state 38
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    s_exp                          shift and go to state 135
    term                           shift and go to state 37
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 86

    (44) s_exp -> NAME OP . exp CP
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 136
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 87

    (51) t_exp -> t_exp COMA . t_exp
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 137
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 88

    (52) t_exp -> t_exp SEMICOLON . t_exp
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 138
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 89

    (65) t_statement -> t_exp symb . term
    (66) t_statement -> t_exp symb . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    VAR             shift and go to state 140
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    term                           shift and go to state 139
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 90

    (67) t_statement -> t_exp IN . NAME

    NAME            shift and go to state 141


state 91

    (58) t_term -> t_list .

    COMA            reduce using rule 58 (t_term -> t_list .)
    SEMICOLON       reduce using rule 58 (t_term -> t_list .)
    $end            reduce using rule 58 (t_term -> t_list .)
    CSB             reduce using rule 58 (t_term -> t_list .)
    SUP             reduce using rule 58 (t_term -> t_list .)
    IN              reduce using rule 58 (t_term -> t_list .)
    EQUAL           reduce using rule 58 (t_term -> t_list .)
    EXC             reduce using rule 58 (t_term -> t_list .)
    INF             reduce using rule 58 (t_term -> t_list .)
    MINUS           reduce using rule 58 (t_term -> t_list .)
    CP              reduce using rule 58 (t_term -> t_list .)


state 92

    (68) t_state_ins -> t_list t_ins_exp .

    $end            reduce using rule 68 (t_state_ins -> t_list t_ins_exp .)


state 93

    (69) t_ins_exp -> t_ins .

    $end            reduce using rule 69 (t_ins_exp -> t_ins .)


state 94

    (70) t_ins_exp -> t_exp .
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

    $end            reduce using rule 70 (t_ins_exp -> t_exp .)
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88


state 95

    (71) t_ins -> NAME .
    (53) t_exp -> NAME . OP t_exp CP

    $end            reduce using rule 71 (t_ins -> NAME .)
    OP              shift and go to state 97


state 96

    (64) t_statement -> t_statement COMA . t_statement
    (64) t_statement -> . t_statement COMA t_statement
    (65) t_statement -> . t_exp symb term
    (66) t_statement -> . t_exp symb VAR
    (67) t_statement -> . t_exp IN NAME
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_statement                    shift and go to state 142
    t_exp                          shift and go to state 143
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 97

    (53) t_exp -> NAME OP . t_exp CP
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 144
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 98

    (60) t_list -> OSB t_exp . CSB
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

    CSB             shift and go to state 145
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88


state 99

    (62) t_list -> OSB CSB .

    NAME            reduce using rule 62 (t_list -> OSB CSB .)
    VAR             reduce using rule 62 (t_list -> OSB CSB .)
    NUM             reduce using rule 62 (t_list -> OSB CSB .)
    STRING          reduce using rule 62 (t_list -> OSB CSB .)
    TRUE            reduce using rule 62 (t_list -> OSB CSB .)
    FALSE           reduce using rule 62 (t_list -> OSB CSB .)
    OSB             reduce using rule 62 (t_list -> OSB CSB .)
    INF             reduce using rule 62 (t_list -> OSB CSB .)
    $end            reduce using rule 62 (t_list -> OSB CSB .)
    COMA            reduce using rule 62 (t_list -> OSB CSB .)
    SEMICOLON       reduce using rule 62 (t_list -> OSB CSB .)
    IN              reduce using rule 62 (t_list -> OSB CSB .)
    EQUAL           reduce using rule 62 (t_list -> OSB CSB .)
    EXC             reduce using rule 62 (t_list -> OSB CSB .)
    SUP             reduce using rule 62 (t_list -> OSB CSB .)
    MINUS           reduce using rule 62 (t_list -> OSB CSB .)
    CSB             reduce using rule 62 (t_list -> OSB CSB .)
    CP              reduce using rule 62 (t_list -> OSB CSB .)


state 100

    (61) t_list -> INF t_exp . SUP
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

    SUP             shift and go to state 146
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88


state 101

    (63) t_list -> INF SUP .

    NAME            reduce using rule 63 (t_list -> INF SUP .)
    VAR             reduce using rule 63 (t_list -> INF SUP .)
    NUM             reduce using rule 63 (t_list -> INF SUP .)
    STRING          reduce using rule 63 (t_list -> INF SUP .)
    TRUE            reduce using rule 63 (t_list -> INF SUP .)
    FALSE           reduce using rule 63 (t_list -> INF SUP .)
    OSB             reduce using rule 63 (t_list -> INF SUP .)
    INF             reduce using rule 63 (t_list -> INF SUP .)
    $end            reduce using rule 63 (t_list -> INF SUP .)
    COMA            reduce using rule 63 (t_list -> INF SUP .)
    SEMICOLON       reduce using rule 63 (t_list -> INF SUP .)
    IN              reduce using rule 63 (t_list -> INF SUP .)
    EQUAL           reduce using rule 63 (t_list -> INF SUP .)
    EXC             reduce using rule 63 (t_list -> INF SUP .)
    SUP             reduce using rule 63 (t_list -> INF SUP .)
    MINUS           reduce using rule 63 (t_list -> INF SUP .)
    CSB             reduce using rule 63 (t_list -> INF SUP .)
    CP              reduce using rule 63 (t_list -> INF SUP .)


state 102

    (96) state -> st_list st_ins_exp .

    $end            reduce using rule 96 (state -> st_list st_ins_exp .)


state 103

    (97) st_ins_exp -> st_ins .

    $end            reduce using rule 97 (st_ins_exp -> st_ins .)


state 104

    (98) st_ins_exp -> st_exp .

    $end            reduce using rule 98 (st_ins_exp -> st_exp .)


state 105

    (99) st_ins -> NAME .
    (100) st_exp -> NAME . OP t_exp CP

    $end            reduce using rule 99 (st_ins -> NAME .)
    OP              shift and go to state 147


state 106

    (101) st_list -> OSB s_exp . CSB
    (42) s_exp -> s_exp . COMA s_exp
    (43) s_exp -> s_exp . SEMICOLON s_exp

    CSB             shift and go to state 148
    COMA            shift and go to state 84
    SEMICOLON       shift and go to state 85


state 107

    (102) st_list -> INF s_exp . SUP
    (42) s_exp -> s_exp . COMA s_exp
    (43) s_exp -> s_exp . SEMICOLON s_exp

    SUP             shift and go to state 149
    COMA            shift and go to state 84
    SEMICOLON       shift and go to state 85


state 108

    (84) c_exp -> c_exp COMA c_exp .
    (84) c_exp -> c_exp . COMA c_exp
    (85) c_exp -> c_exp . SEMICOLON c_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    EQUAL           reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    EXC             reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    SUP             reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    INF             reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    $end            reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    CP              reduce using rule 84 (c_exp -> c_exp COMA c_exp .)
    COMA            shift and go to state 60
    SEMICOLON       shift and go to state 61

  ! COMA            [ reduce using rule 84 (c_exp -> c_exp COMA c_exp .) ]
  ! SEMICOLON       [ reduce using rule 84 (c_exp -> c_exp COMA c_exp .) ]


state 109

    (85) c_exp -> c_exp SEMICOLON c_exp .
    (84) c_exp -> c_exp . COMA c_exp
    (85) c_exp -> c_exp . SEMICOLON c_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    EQUAL           reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    EXC             reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    SUP             reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    INF             reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    $end            reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    CP              reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .)
    COMA            shift and go to state 60
    SEMICOLON       shift and go to state 61

  ! COMA            [ reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .) ]
  ! SEMICOLON       [ reduce using rule 85 (c_exp -> c_exp SEMICOLON c_exp .) ]


state 110

    (76) c_condition -> c_exp comparator c_exp .
    (84) c_exp -> c_exp . COMA c_exp
    (85) c_exp -> c_exp . SEMICOLON c_exp

    $end            reduce using rule 76 (c_condition -> c_exp comparator c_exp .)
    COMA            shift and go to state 60
    SEMICOLON       shift and go to state 61


state 111

    (77) comparator -> EQUAL EQUAL .

    NAME            reduce using rule 77 (comparator -> EQUAL EQUAL .)
    NUM             reduce using rule 77 (comparator -> EQUAL EQUAL .)
    STRING          reduce using rule 77 (comparator -> EQUAL EQUAL .)
    TRUE            reduce using rule 77 (comparator -> EQUAL EQUAL .)
    FALSE           reduce using rule 77 (comparator -> EQUAL EQUAL .)
    OSB             reduce using rule 77 (comparator -> EQUAL EQUAL .)
    INF             reduce using rule 77 (comparator -> EQUAL EQUAL .)


state 112

    (78) comparator -> EXC EQUAL .

    NAME            reduce using rule 78 (comparator -> EXC EQUAL .)
    NUM             reduce using rule 78 (comparator -> EXC EQUAL .)
    STRING          reduce using rule 78 (comparator -> EXC EQUAL .)
    TRUE            reduce using rule 78 (comparator -> EXC EQUAL .)
    FALSE           reduce using rule 78 (comparator -> EXC EQUAL .)
    OSB             reduce using rule 78 (comparator -> EXC EQUAL .)
    INF             reduce using rule 78 (comparator -> EXC EQUAL .)


state 113

    (80) comparator -> SUP EQUAL .

    NAME            reduce using rule 80 (comparator -> SUP EQUAL .)
    NUM             reduce using rule 80 (comparator -> SUP EQUAL .)
    STRING          reduce using rule 80 (comparator -> SUP EQUAL .)
    TRUE            reduce using rule 80 (comparator -> SUP EQUAL .)
    FALSE           reduce using rule 80 (comparator -> SUP EQUAL .)
    OSB             reduce using rule 80 (comparator -> SUP EQUAL .)
    INF             reduce using rule 80 (comparator -> SUP EQUAL .)


state 114

    (82) comparator -> INF EQUAL .

    NAME            reduce using rule 82 (comparator -> INF EQUAL .)
    NUM             reduce using rule 82 (comparator -> INF EQUAL .)
    STRING          reduce using rule 82 (comparator -> INF EQUAL .)
    TRUE            reduce using rule 82 (comparator -> INF EQUAL .)
    FALSE           reduce using rule 82 (comparator -> INF EQUAL .)
    OSB             reduce using rule 82 (comparator -> INF EQUAL .)
    INF             reduce using rule 82 (comparator -> INF EQUAL .)


state 115

    (83) c_exp -> NAME OP c_exp . CP
    (84) c_exp -> c_exp . COMA c_exp
    (85) c_exp -> c_exp . SEMICOLON c_exp

    CP              shift and go to state 150
    COMA            shift and go to state 60
    SEMICOLON       shift and go to state 61


state 116

    (24) list -> OSB exp CSB .

    COMA            reduce using rule 24 (list -> OSB exp CSB .)
    SEMICOLON       reduce using rule 24 (list -> OSB exp CSB .)
    EQUAL           reduce using rule 24 (list -> OSB exp CSB .)
    EXC             reduce using rule 24 (list -> OSB exp CSB .)
    SUP             reduce using rule 24 (list -> OSB exp CSB .)
    INF             reduce using rule 24 (list -> OSB exp CSB .)
    $end            reduce using rule 24 (list -> OSB exp CSB .)
    IN              reduce using rule 24 (list -> OSB exp CSB .)
    MINUS           reduce using rule 24 (list -> OSB exp CSB .)
    CSB             reduce using rule 24 (list -> OSB exp CSB .)
    CP              reduce using rule 24 (list -> OSB exp CSB .)
    NAME            reduce using rule 24 (list -> OSB exp CSB .)
    VAR             reduce using rule 24 (list -> OSB exp CSB .)
    NUM             reduce using rule 24 (list -> OSB exp CSB .)
    STRING          reduce using rule 24 (list -> OSB exp CSB .)
    TRUE            reduce using rule 24 (list -> OSB exp CSB .)
    FALSE           reduce using rule 24 (list -> OSB exp CSB .)
    OSB             reduce using rule 24 (list -> OSB exp CSB .)


state 117

    (25) list -> INF exp SUP .

    COMA            reduce using rule 25 (list -> INF exp SUP .)
    SEMICOLON       reduce using rule 25 (list -> INF exp SUP .)
    EQUAL           reduce using rule 25 (list -> INF exp SUP .)
    EXC             reduce using rule 25 (list -> INF exp SUP .)
    SUP             reduce using rule 25 (list -> INF exp SUP .)
    INF             reduce using rule 25 (list -> INF exp SUP .)
    $end            reduce using rule 25 (list -> INF exp SUP .)
    IN              reduce using rule 25 (list -> INF exp SUP .)
    MINUS           reduce using rule 25 (list -> INF exp SUP .)
    CSB             reduce using rule 25 (list -> INF exp SUP .)
    CP              reduce using rule 25 (list -> INF exp SUP .)
    NAME            reduce using rule 25 (list -> INF exp SUP .)
    VAR             reduce using rule 25 (list -> INF exp SUP .)
    NUM             reduce using rule 25 (list -> INF exp SUP .)
    STRING          reduce using rule 25 (list -> INF exp SUP .)
    TRUE            reduce using rule 25 (list -> INF exp SUP .)
    FALSE           reduce using rule 25 (list -> INF exp SUP .)
    OSB             reduce using rule 25 (list -> INF exp SUP .)


state 118

    (8) lang -> premises MINUS MINUS . conclusion
    (34) conclusion -> . exp MINUS SUP exp
    (35) conclusion -> . list ins_exp MINUS SUP list
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    OSB             shift and go to state 19
    INF             shift and go to state 20
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    conclusion                     shift and go to state 151
    exp                            shift and go to state 120
    list                           shift and go to state 121
    term                           shift and go to state 27
    boolean                        shift and go to state 32

state 119

    (9) lang -> MINUS MINUS conclusion .

    $end            reduce using rule 9 (lang -> MINUS MINUS conclusion .)


state 120

    (34) conclusion -> exp . MINUS SUP exp
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    MINUS           shift and go to state 152
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 121

    (35) conclusion -> list . ins_exp MINUS SUP list
    (23) term -> list .
    (36) ins_exp -> . NAME
    (37) ins_exp -> . exp
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    MINUS           reduce using rule 23 (term -> list .)
    COMA            reduce using rule 23 (term -> list .)
    SEMICOLON       reduce using rule 23 (term -> list .)
    NAME            shift and go to state 154
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    list                           shift and go to state 33
    ins_exp                        shift and go to state 153
    exp                            shift and go to state 155
    term                           shift and go to state 27
    boolean                        shift and go to state 32

state 122

    (11) statement -> statement COMA statement .
    (11) statement -> statement . COMA statement

  ! shift/reduce conflict for COMA resolved as shift
    MINUS           reduce using rule 11 (statement -> statement COMA statement .)
    COMA            shift and go to state 73

  ! COMA            [ reduce using rule 11 (statement -> statement COMA statement .) ]


state 123

    (12) statement -> exp symb term .

    COMA            reduce using rule 12 (statement -> exp symb term .)
    MINUS           reduce using rule 12 (statement -> exp symb term .)


state 124

    (13) statement -> exp symb VAR .

    COMA            reduce using rule 13 (statement -> exp symb VAR .)
    MINUS           reduce using rule 13 (statement -> exp symb VAR .)


state 125

    (14) statement -> exp IN NAME .

    COMA            reduce using rule 14 (statement -> exp IN NAME .)
    MINUS           reduce using rule 14 (statement -> exp IN NAME .)


state 126

    (15) exp -> exp COMA exp .
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    IN              reduce using rule 15 (exp -> exp COMA exp .)
    EQUAL           reduce using rule 15 (exp -> exp COMA exp .)
    EXC             reduce using rule 15 (exp -> exp COMA exp .)
    INF             reduce using rule 15 (exp -> exp COMA exp .)
    SUP             reduce using rule 15 (exp -> exp COMA exp .)
    MINUS           reduce using rule 15 (exp -> exp COMA exp .)
    CSB             reduce using rule 15 (exp -> exp COMA exp .)
    CP              reduce using rule 15 (exp -> exp COMA exp .)
    $end            reduce using rule 15 (exp -> exp COMA exp .)
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77

  ! COMA            [ reduce using rule 15 (exp -> exp COMA exp .) ]
  ! SEMICOLON       [ reduce using rule 15 (exp -> exp COMA exp .) ]


state 127

    (16) exp -> exp SEMICOLON exp .
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    IN              reduce using rule 16 (exp -> exp SEMICOLON exp .)
    EQUAL           reduce using rule 16 (exp -> exp SEMICOLON exp .)
    EXC             reduce using rule 16 (exp -> exp SEMICOLON exp .)
    INF             reduce using rule 16 (exp -> exp SEMICOLON exp .)
    SUP             reduce using rule 16 (exp -> exp SEMICOLON exp .)
    MINUS           reduce using rule 16 (exp -> exp SEMICOLON exp .)
    CSB             reduce using rule 16 (exp -> exp SEMICOLON exp .)
    CP              reduce using rule 16 (exp -> exp SEMICOLON exp .)
    $end            reduce using rule 16 (exp -> exp SEMICOLON exp .)
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77

  ! COMA            [ reduce using rule 16 (exp -> exp SEMICOLON exp .) ]
  ! SEMICOLON       [ reduce using rule 16 (exp -> exp SEMICOLON exp .) ]


state 128

    (27) symb -> EQUAL EQUAL .

    VAR             reduce using rule 27 (symb -> EQUAL EQUAL .)
    NUM             reduce using rule 27 (symb -> EQUAL EQUAL .)
    STRING          reduce using rule 27 (symb -> EQUAL EQUAL .)
    TRUE            reduce using rule 27 (symb -> EQUAL EQUAL .)
    FALSE           reduce using rule 27 (symb -> EQUAL EQUAL .)
    OSB             reduce using rule 27 (symb -> EQUAL EQUAL .)
    INF             reduce using rule 27 (symb -> EQUAL EQUAL .)


state 129

    (28) symb -> EXC EQUAL .

    VAR             reduce using rule 28 (symb -> EXC EQUAL .)
    NUM             reduce using rule 28 (symb -> EXC EQUAL .)
    STRING          reduce using rule 28 (symb -> EXC EQUAL .)
    TRUE            reduce using rule 28 (symb -> EXC EQUAL .)
    FALSE           reduce using rule 28 (symb -> EXC EQUAL .)
    OSB             reduce using rule 28 (symb -> EXC EQUAL .)
    INF             reduce using rule 28 (symb -> EXC EQUAL .)


state 130

    (29) symb -> INF EQUAL .

    VAR             reduce using rule 29 (symb -> INF EQUAL .)
    NUM             reduce using rule 29 (symb -> INF EQUAL .)
    STRING          reduce using rule 29 (symb -> INF EQUAL .)
    TRUE            reduce using rule 29 (symb -> INF EQUAL .)
    FALSE           reduce using rule 29 (symb -> INF EQUAL .)
    OSB             reduce using rule 29 (symb -> INF EQUAL .)
    INF             reduce using rule 29 (symb -> INF EQUAL .)


state 131

    (30) symb -> SUP EQUAL .

    VAR             reduce using rule 30 (symb -> SUP EQUAL .)
    NUM             reduce using rule 30 (symb -> SUP EQUAL .)
    STRING          reduce using rule 30 (symb -> SUP EQUAL .)
    TRUE            reduce using rule 30 (symb -> SUP EQUAL .)
    FALSE           reduce using rule 30 (symb -> SUP EQUAL .)
    OSB             reduce using rule 30 (symb -> SUP EQUAL .)
    INF             reduce using rule 30 (symb -> SUP EQUAL .)


state 132

    (33) symb -> MINUS SUP .

    VAR             reduce using rule 33 (symb -> MINUS SUP .)
    NUM             reduce using rule 33 (symb -> MINUS SUP .)
    STRING          reduce using rule 33 (symb -> MINUS SUP .)
    TRUE            reduce using rule 33 (symb -> MINUS SUP .)
    FALSE           reduce using rule 33 (symb -> MINUS SUP .)
    OSB             reduce using rule 33 (symb -> MINUS SUP .)
    INF             reduce using rule 33 (symb -> MINUS SUP .)


state 133

    (17) exp -> NAME OP exp . CP
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    CP              shift and go to state 156
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 134

    (42) s_exp -> s_exp COMA s_exp .
    (42) s_exp -> s_exp . COMA s_exp
    (43) s_exp -> s_exp . SEMICOLON s_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    $end            reduce using rule 42 (s_exp -> s_exp COMA s_exp .)
    CSB             reduce using rule 42 (s_exp -> s_exp COMA s_exp .)
    SUP             reduce using rule 42 (s_exp -> s_exp COMA s_exp .)
    COMA            shift and go to state 84
    SEMICOLON       shift and go to state 85

  ! COMA            [ reduce using rule 42 (s_exp -> s_exp COMA s_exp .) ]
  ! SEMICOLON       [ reduce using rule 42 (s_exp -> s_exp COMA s_exp .) ]


state 135

    (43) s_exp -> s_exp SEMICOLON s_exp .
    (42) s_exp -> s_exp . COMA s_exp
    (43) s_exp -> s_exp . SEMICOLON s_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    $end            reduce using rule 43 (s_exp -> s_exp SEMICOLON s_exp .)
    CSB             reduce using rule 43 (s_exp -> s_exp SEMICOLON s_exp .)
    SUP             reduce using rule 43 (s_exp -> s_exp SEMICOLON s_exp .)
    COMA            shift and go to state 84
    SEMICOLON       shift and go to state 85

  ! COMA            [ reduce using rule 43 (s_exp -> s_exp SEMICOLON s_exp .) ]
  ! SEMICOLON       [ reduce using rule 43 (s_exp -> s_exp SEMICOLON s_exp .) ]


state 136

    (44) s_exp -> NAME OP exp . CP
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    CP              shift and go to state 157
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 137

    (51) t_exp -> t_exp COMA t_exp .
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    IN              reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    EQUAL           reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    EXC             reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    INF             reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    SUP             reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    MINUS           reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    $end            reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    CSB             reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    CP              reduce using rule 51 (t_exp -> t_exp COMA t_exp .)
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88

  ! COMA            [ reduce using rule 51 (t_exp -> t_exp COMA t_exp .) ]
  ! SEMICOLON       [ reduce using rule 51 (t_exp -> t_exp COMA t_exp .) ]


state 138

    (52) t_exp -> t_exp SEMICOLON t_exp .
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

  ! shift/reduce conflict for COMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    IN              reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    EQUAL           reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    EXC             reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    INF             reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    SUP             reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    MINUS           reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    $end            reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    CSB             reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    CP              reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .)
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88

  ! COMA            [ reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .) ]
  ! SEMICOLON       [ reduce using rule 52 (t_exp -> t_exp SEMICOLON t_exp .) ]


state 139

    (65) t_statement -> t_exp symb term .

    COMA            reduce using rule 65 (t_statement -> t_exp symb term .)
    $end            reduce using rule 65 (t_statement -> t_exp symb term .)


state 140

    (66) t_statement -> t_exp symb VAR .

    COMA            reduce using rule 66 (t_statement -> t_exp symb VAR .)
    $end            reduce using rule 66 (t_statement -> t_exp symb VAR .)


state 141

    (67) t_statement -> t_exp IN NAME .

    COMA            reduce using rule 67 (t_statement -> t_exp IN NAME .)
    $end            reduce using rule 67 (t_statement -> t_exp IN NAME .)


state 142

    (64) t_statement -> t_statement COMA t_statement .
    (64) t_statement -> t_statement . COMA t_statement

  ! shift/reduce conflict for COMA resolved as shift
    $end            reduce using rule 64 (t_statement -> t_statement COMA t_statement .)
    COMA            shift and go to state 96

  ! COMA            [ reduce using rule 64 (t_statement -> t_statement COMA t_statement .) ]


state 143

    (65) t_statement -> t_exp . symb term
    (66) t_statement -> t_exp . symb VAR
    (67) t_statement -> t_exp . IN NAME
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp
    (27) symb -> . EQUAL EQUAL
    (28) symb -> . EXC EQUAL
    (29) symb -> . INF EQUAL
    (30) symb -> . SUP EQUAL
    (31) symb -> . INF
    (32) symb -> . SUP
    (33) symb -> . MINUS SUP

    IN              shift and go to state 90
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88
    EQUAL           shift and go to state 78
    EXC             shift and go to state 79
    INF             shift and go to state 80
    SUP             shift and go to state 81
    MINUS           shift and go to state 82

    symb                           shift and go to state 89

state 144

    (53) t_exp -> NAME OP t_exp . CP
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

    CP              shift and go to state 158
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88


state 145

    (60) t_list -> OSB t_exp CSB .

    NAME            reduce using rule 60 (t_list -> OSB t_exp CSB .)
    VAR             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    NUM             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    STRING          reduce using rule 60 (t_list -> OSB t_exp CSB .)
    TRUE            reduce using rule 60 (t_list -> OSB t_exp CSB .)
    FALSE           reduce using rule 60 (t_list -> OSB t_exp CSB .)
    OSB             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    INF             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    $end            reduce using rule 60 (t_list -> OSB t_exp CSB .)
    COMA            reduce using rule 60 (t_list -> OSB t_exp CSB .)
    SEMICOLON       reduce using rule 60 (t_list -> OSB t_exp CSB .)
    IN              reduce using rule 60 (t_list -> OSB t_exp CSB .)
    EQUAL           reduce using rule 60 (t_list -> OSB t_exp CSB .)
    EXC             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    SUP             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    MINUS           reduce using rule 60 (t_list -> OSB t_exp CSB .)
    CSB             reduce using rule 60 (t_list -> OSB t_exp CSB .)
    CP              reduce using rule 60 (t_list -> OSB t_exp CSB .)


state 146

    (61) t_list -> INF t_exp SUP .

    NAME            reduce using rule 61 (t_list -> INF t_exp SUP .)
    VAR             reduce using rule 61 (t_list -> INF t_exp SUP .)
    NUM             reduce using rule 61 (t_list -> INF t_exp SUP .)
    STRING          reduce using rule 61 (t_list -> INF t_exp SUP .)
    TRUE            reduce using rule 61 (t_list -> INF t_exp SUP .)
    FALSE           reduce using rule 61 (t_list -> INF t_exp SUP .)
    OSB             reduce using rule 61 (t_list -> INF t_exp SUP .)
    INF             reduce using rule 61 (t_list -> INF t_exp SUP .)
    $end            reduce using rule 61 (t_list -> INF t_exp SUP .)
    COMA            reduce using rule 61 (t_list -> INF t_exp SUP .)
    SEMICOLON       reduce using rule 61 (t_list -> INF t_exp SUP .)
    IN              reduce using rule 61 (t_list -> INF t_exp SUP .)
    EQUAL           reduce using rule 61 (t_list -> INF t_exp SUP .)
    EXC             reduce using rule 61 (t_list -> INF t_exp SUP .)
    SUP             reduce using rule 61 (t_list -> INF t_exp SUP .)
    MINUS           reduce using rule 61 (t_list -> INF t_exp SUP .)
    CSB             reduce using rule 61 (t_list -> INF t_exp SUP .)
    CP              reduce using rule 61 (t_list -> INF t_exp SUP .)


state 147

    (100) st_exp -> NAME OP . t_exp CP
    (51) t_exp -> . t_exp COMA t_exp
    (52) t_exp -> . t_exp SEMICOLON t_exp
    (53) t_exp -> . NAME OP t_exp CP
    (54) t_exp -> . t_term
    (55) t_exp -> . VAR
    (56) t_term -> . NUM
    (57) t_term -> . boolean
    (58) t_term -> . t_list
    (59) t_term -> . STRING
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (60) t_list -> . OSB t_exp CSB
    (61) t_list -> . INF t_exp SUP
    (62) t_list -> . OSB CSB
    (63) t_list -> . INF SUP

    NAME            shift and go to state 44
    VAR             shift and go to state 46
    NUM             shift and go to state 49
    STRING          shift and go to state 51
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 47
    INF             shift and go to state 48

    t_exp                          shift and go to state 159
    t_term                         shift and go to state 45
    boolean                        shift and go to state 50
    t_list                         shift and go to state 91

state 148

    (101) st_list -> OSB s_exp CSB .

    NAME            reduce using rule 101 (st_list -> OSB s_exp CSB .)


state 149

    (102) st_list -> INF s_exp SUP .

    NAME            reduce using rule 102 (st_list -> INF s_exp SUP .)


state 150

    (83) c_exp -> NAME OP c_exp CP .

    COMA            reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    SEMICOLON       reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    EQUAL           reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    EXC             reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    SUP             reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    INF             reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    $end            reduce using rule 83 (c_exp -> NAME OP c_exp CP .)
    CP              reduce using rule 83 (c_exp -> NAME OP c_exp CP .)


state 151

    (8) lang -> premises MINUS MINUS conclusion .

    $end            reduce using rule 8 (lang -> premises MINUS MINUS conclusion .)


state 152

    (34) conclusion -> exp MINUS . SUP exp

    SUP             shift and go to state 160


state 153

    (35) conclusion -> list ins_exp . MINUS SUP list

    MINUS           shift and go to state 161


state 154

    (36) ins_exp -> NAME .
    (17) exp -> NAME . OP exp CP

    MINUS           reduce using rule 36 (ins_exp -> NAME .)
    OP              shift and go to state 83


state 155

    (37) ins_exp -> exp .
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    MINUS           reduce using rule 37 (ins_exp -> exp .)
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 156

    (17) exp -> NAME OP exp CP .

    IN              reduce using rule 17 (exp -> NAME OP exp CP .)
    COMA            reduce using rule 17 (exp -> NAME OP exp CP .)
    SEMICOLON       reduce using rule 17 (exp -> NAME OP exp CP .)
    EQUAL           reduce using rule 17 (exp -> NAME OP exp CP .)
    EXC             reduce using rule 17 (exp -> NAME OP exp CP .)
    INF             reduce using rule 17 (exp -> NAME OP exp CP .)
    SUP             reduce using rule 17 (exp -> NAME OP exp CP .)
    MINUS           reduce using rule 17 (exp -> NAME OP exp CP .)
    CSB             reduce using rule 17 (exp -> NAME OP exp CP .)
    CP              reduce using rule 17 (exp -> NAME OP exp CP .)
    $end            reduce using rule 17 (exp -> NAME OP exp CP .)


state 157

    (44) s_exp -> NAME OP exp CP .

    COMA            reduce using rule 44 (s_exp -> NAME OP exp CP .)
    SEMICOLON       reduce using rule 44 (s_exp -> NAME OP exp CP .)
    $end            reduce using rule 44 (s_exp -> NAME OP exp CP .)
    CSB             reduce using rule 44 (s_exp -> NAME OP exp CP .)
    SUP             reduce using rule 44 (s_exp -> NAME OP exp CP .)


state 158

    (53) t_exp -> NAME OP t_exp CP .

    COMA            reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    SEMICOLON       reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    IN              reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    EQUAL           reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    EXC             reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    INF             reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    SUP             reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    MINUS           reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    $end            reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    CSB             reduce using rule 53 (t_exp -> NAME OP t_exp CP .)
    CP              reduce using rule 53 (t_exp -> NAME OP t_exp CP .)


state 159

    (100) st_exp -> NAME OP t_exp . CP
    (51) t_exp -> t_exp . COMA t_exp
    (52) t_exp -> t_exp . SEMICOLON t_exp

    CP              shift and go to state 162
    COMA            shift and go to state 87
    SEMICOLON       shift and go to state 88


state 160

    (34) conclusion -> exp MINUS SUP . exp
    (15) exp -> . exp COMA exp
    (16) exp -> . exp SEMICOLON exp
    (17) exp -> . NAME OP exp CP
    (18) exp -> . term
    (19) exp -> . VAR
    (20) term -> . NUM
    (21) term -> . STRING
    (22) term -> . boolean
    (23) term -> . list
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    NAME            shift and go to state 29
    VAR             shift and go to state 28
    NUM             shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    OSB             shift and go to state 19
    INF             shift and go to state 20

    exp                            shift and go to state 163
    term                           shift and go to state 27
    boolean                        shift and go to state 32
    list                           shift and go to state 33

state 161

    (35) conclusion -> list ins_exp MINUS . SUP list

    SUP             shift and go to state 164


state 162

    (100) st_exp -> NAME OP t_exp CP .

    $end            reduce using rule 100 (st_exp -> NAME OP t_exp CP .)


state 163

    (34) conclusion -> exp MINUS SUP exp .
    (15) exp -> exp . COMA exp
    (16) exp -> exp . SEMICOLON exp

    $end            reduce using rule 34 (conclusion -> exp MINUS SUP exp .)
    COMA            shift and go to state 76
    SEMICOLON       shift and go to state 77


state 164

    (35) conclusion -> list ins_exp MINUS SUP . list
    (24) list -> . OSB exp CSB
    (25) list -> . INF exp SUP
    (26) list -> . OSB CSB

    OSB             shift and go to state 19
    INF             shift and go to state 20

    list                           shift and go to state 165

state 165

    (35) conclusion -> list ins_exp MINUS SUP list .

    $end            reduce using rule 35 (conclusion -> list ins_exp MINUS SUP list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INF in state 41 resolved as shift
WARNING: shift/reduce conflict for COMA in state 108 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 108 resolved as shift
WARNING: shift/reduce conflict for COMA in state 109 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 109 resolved as shift
WARNING: shift/reduce conflict for COMA in state 122 resolved as shift
WARNING: shift/reduce conflict for COMA in state 126 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 126 resolved as shift
WARNING: shift/reduce conflict for COMA in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 127 resolved as shift
WARNING: shift/reduce conflict for COMA in state 134 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 134 resolved as shift
WARNING: shift/reduce conflict for COMA in state 135 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 135 resolved as shift
WARNING: shift/reduce conflict for COMA in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 137 resolved as shift
WARNING: shift/reduce conflict for COMA in state 138 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 138 resolved as shift
WARNING: shift/reduce conflict for COMA in state 142 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (token -> t_list)
WARNING: rejected rule (t_term -> t_list) in state 41
