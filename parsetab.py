
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startCALC CHECK COMA CP CSB EQUAL FALSE IN INF ISLIST ISNUMBER MINUS NAME NUM OP OSB SEMICOLON SPLIT STATE SUP TOKEN TRUE VAR\n    start : CALC calc\n          | CHECK check\n          | SPLIT split\n          | TOKEN token\n          | ISNUMBER isnumber\n          | STATE state\n    \n    lang : premises MINUS MINUS conclusion\n         | MINUS MINUS conclusion\n    \n    premises : statement\n    \n    statement : statement COMA statement\n    \n    statement : exp symb term\n              | exp symb VAR\n    \n    statement : exp IN NAME\n    \n    exp : exp COMA exp\n        | exp SEMICOLON exp\n    \n    exp : NAME OP exp CP\n    \n    exp : term\n        | VAR\n    \n    term : NUM\n        | boolean\n        | list\n    \n    list : OSB exp CSB\n         | INF exp SUP\n    \n    list : OSB CSB\n    \n    symb : EQUAL EQUAL\n         | INF EQUAL\n         | SUP EQUAL\n         | INF\n         | SUP\n         | MINUS SUP\n    \n    conclusion : exp MINUS SUP exp\n    \n    conclusion : list ins_exp MINUS SUP list\n    \n    ins_exp : NAME\n            | exp\n    \n    boolean : TRUE\n            | FALSE\n    \n    check : lang\n    \n    split : s_exp\n    \n    s_exp : s_exp COMA s_exp\n          | s_exp SEMICOLON s_exp\n    \n    s_exp : NAME OP exp CP\n    \n    s_exp : term\n          | VAR\n    \n    token : t_exp\n          | t_list\n          | t_statement\n          | t_state_ins\n    \n    t_exp : t_exp COMA t_exp\n          | t_exp SEMICOLON t_exp\n    \n    t_exp : NAME OP t_exp CP\n    \n    t_exp : t_term\n          | VAR\n    \n    t_term : NUM\n           | boolean\n           | t_list\n    \n    t_list : OSB t_exp CSB\n           | INF t_exp SUP\n    \n    t_list : OSB CSB\n           | INF SUP\n    \n    t_statement : t_statement COMA t_statement\n    \n    t_statement : t_exp symb term\n                | t_exp symb VAR\n    \n    t_statement : t_exp IN NAME\n    \n    t_state_ins : t_list t_ins_exp\n    \n    t_ins_exp : t_ins\n              | t_exp\n    \n    t_ins : NAME\n    \n    isnumber : NUM\n    \n    calc : c_exp\n    \n    calc : c_condition\n    \n    c_condition : c_exp comparator c_exp\n    \n    comparator : EQUAL EQUAL\n               | SUP\n               | SUP EQUAL\n               | INF\n               | INF EQUAL\n    \n    c_exp : NAME OP c_exp CP\n    \n    c_exp : c_exp COMA c_exp\n          | c_exp SEMICOLON c_exp\n    \n    c_exp : NUM\n          | boolean\n    \n    c_exp : list\n    \n    c_list : OSB c_morelist CSB\n    \n    c_morelist : NUM COMA c_morelist\n               | NUM SEMICOLON c_morelist\n    \n    c_morelist : NUM\n    \n    c_list : OSB CSB\n    \n    c_list : INF c_morelist SUP\n    \n    state : st_list st_ins_exp\n    \n    st_ins_exp : st_ins\n    \n    st_ins_exp : st_exp\n    \n    st_ins : NAME\n    \n    st_exp : NAME OP t_exp CP\n    \n    st_list : OSB s_exp CSB\n            | INF s_exp SUP\n    '
    
_lr_action_items = {'CALC':([0,],[2,]),'CHECK':([0,],[3,]),'SPLIT':([0,],[4,]),'TOKEN':([0,],[5,]),'ISNUMBER':([0,],[6,]),'STATE':([0,],[7,]),'$end':([1,8,9,10,12,13,14,15,16,19,20,25,26,28,29,30,31,32,34,35,36,37,38,39,40,42,43,46,47,48,49,50,62,83,84,85,86,87,91,93,94,95,96,97,100,101,102,107,108,110,117,118,124,125,127,128,129,130,131,132,135,136,140,141,146,147,148,152,153,155,],[0,-1,-69,-70,-80,-81,-82,-35,-36,-2,-37,-17,-18,-19,-20,-21,-3,-38,-42,-43,-4,-44,-45,-46,-47,-51,-52,-53,-54,-5,-68,-6,-24,-55,-64,-65,-66,-67,-58,-59,-89,-90,-91,-92,-78,-79,-71,-22,-23,-8,-14,-15,-39,-40,-48,-49,-61,-62,-63,-60,-56,-57,-77,-7,-16,-41,-50,-93,-31,-32,]),'NAME':([2,3,4,5,17,18,38,44,45,51,52,53,54,55,56,58,59,60,62,65,66,68,69,70,75,76,77,78,79,80,82,88,89,91,93,103,104,105,107,108,109,112,135,136,137,138,139,150,],[11,27,33,41,27,27,87,41,41,97,33,33,11,11,11,-73,-75,11,-24,27,27,116,27,27,27,33,33,27,41,41,131,41,41,-58,-59,-72,-74,-76,-22,-23,27,144,-56,-57,41,-94,-95,27,]),'NUM':([2,3,4,5,6,17,18,38,44,45,52,53,54,55,56,58,59,60,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,88,89,91,93,103,104,105,107,108,109,112,119,120,121,122,135,136,137,150,],[12,28,28,46,49,28,28,46,46,46,28,28,12,12,12,-73,-75,12,-24,28,28,28,28,28,-28,-29,28,28,28,28,46,46,28,46,46,-58,-59,-72,-74,-76,-22,-23,28,28,-25,-26,-27,-30,-56,-57,46,28,]),'TRUE':([2,3,4,5,17,18,38,44,45,52,53,54,55,56,58,59,60,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,88,89,91,93,103,104,105,107,108,109,112,119,120,121,122,135,136,137,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,-73,-75,15,-24,15,15,15,15,15,-28,-29,15,15,15,15,15,15,15,15,15,-58,-59,-72,-74,-76,-22,-23,15,15,-25,-26,-27,-30,-56,-57,15,15,]),'FALSE':([2,3,4,5,17,18,38,44,45,52,53,54,55,56,58,59,60,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,88,89,91,93,103,104,105,107,108,109,112,119,120,121,122,135,136,137,150,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,-73,-75,16,-24,16,16,16,16,16,-28,-29,16,16,16,16,16,16,16,16,16,-58,-59,-72,-74,-76,-22,-23,16,16,-25,-26,-27,-30,-56,-57,16,16,]),'OSB':([2,3,4,5,7,17,18,38,44,45,52,53,54,55,56,58,59,60,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,88,89,91,93,103,104,105,107,108,109,112,119,120,121,122,135,136,137,150,154,],[17,17,17,44,52,17,17,44,44,44,17,17,17,17,17,-73,-75,17,-24,17,17,17,17,17,-28,-29,17,17,17,17,44,44,17,44,44,-58,-59,-72,-74,-76,-22,-23,17,17,-25,-26,-27,-30,-56,-57,44,17,17,]),'INF':([2,3,4,5,7,9,12,13,14,15,16,17,18,24,25,26,28,29,30,37,38,42,43,44,45,46,47,52,53,54,55,56,58,59,60,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,83,88,89,91,93,100,101,103,104,105,107,108,109,112,117,118,119,120,121,122,127,128,133,135,136,137,140,146,148,150,154,],[18,18,18,45,53,59,-80,-81,-82,-35,-36,18,18,72,-17,-18,-19,-20,-21,72,45,-51,-52,45,45,-53,-54,18,18,18,18,18,-73,-75,18,-24,18,18,18,18,18,-28,-29,18,18,18,18,45,45,18,-55,45,45,-58,-59,-78,-79,-72,-74,-76,-22,-23,18,18,-14,-15,-25,-26,-27,-30,-48,-49,72,-56,-57,45,-77,-16,-50,18,18,]),'MINUS':([3,15,16,21,22,23,24,25,26,28,29,30,37,38,42,43,46,47,62,64,83,91,93,107,108,111,112,113,114,115,116,117,118,127,128,133,135,136,143,144,145,146,148,],[22,-35,-36,64,65,-9,74,-17,-18,-19,-20,-21,74,-55,-51,-52,-53,-54,-24,109,-55,-58,-59,-22,-23,142,-21,-10,-11,-12,-13,-14,-15,-48,-49,74,-56,-57,151,-33,-34,-16,-50,]),'VAR':([3,4,5,17,18,38,44,45,52,53,62,65,66,67,69,70,72,73,75,76,77,78,79,80,81,88,89,91,93,107,108,109,112,119,120,121,122,135,136,137,150,],[26,35,43,26,26,43,43,43,35,35,-24,26,26,115,26,26,-28,-29,26,35,35,26,43,43,130,43,43,-58,-59,-22,-23,26,26,-25,-26,-27,-30,-56,-57,43,26,]),'COMA':([9,12,13,14,15,16,23,24,25,26,28,29,30,32,34,35,37,38,39,42,43,46,47,61,62,63,83,86,90,91,92,93,98,99,100,101,102,106,107,108,111,112,113,114,115,116,117,118,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,145,146,147,148,149,153,],[54,-80,-81,-82,-35,-36,66,69,-17,-18,-19,-20,-21,76,-42,-43,79,-55,88,-51,-52,-53,-54,69,-24,69,-55,79,79,-58,79,-59,76,76,54,54,54,54,-22,-23,69,-21,66,-11,-12,-13,69,69,69,76,76,69,79,79,-61,-62,-63,88,79,79,-56,-57,-77,69,-16,-41,-50,79,69,]),'SEMICOLON':([9,12,13,14,15,16,24,25,26,28,29,30,32,34,35,37,38,42,43,46,47,61,62,63,83,86,90,91,92,93,98,99,100,101,102,106,107,108,111,112,117,118,123,124,125,126,127,128,133,134,135,136,140,145,146,147,148,149,153,],[55,-80,-81,-82,-35,-36,70,-17,-18,-19,-20,-21,77,-42,-43,80,-55,-51,-52,-53,-54,70,-24,70,-55,80,80,-58,80,-59,77,77,55,55,55,55,-22,-23,70,-21,70,70,70,77,77,70,80,80,80,80,-56,-57,-77,70,-16,-41,-50,80,70,]),'EQUAL':([9,12,13,14,15,16,24,25,26,28,29,30,37,38,42,43,46,47,57,58,59,62,71,72,73,83,91,93,100,101,107,108,117,118,127,128,133,135,136,140,146,148,],[57,-80,-81,-82,-35,-36,71,-17,-18,-19,-20,-21,71,-55,-51,-52,-53,-54,103,104,105,-24,119,120,121,-55,-58,-59,-78,-79,-22,-23,-14,-15,-48,-49,71,-56,-57,-77,-16,-50,]),'SUP':([9,12,13,14,15,16,24,25,26,28,29,30,34,35,37,38,42,43,45,46,47,62,63,74,83,91,92,93,99,100,101,107,108,117,118,124,125,127,128,133,135,136,140,142,146,147,148,151,],[58,-80,-81,-82,-35,-36,73,-17,-18,-19,-20,-21,-42,-43,73,-55,-51,-52,93,-53,-54,-24,108,122,-55,-58,136,-59,139,-78,-79,-22,-23,-14,-15,-39,-40,-48,-49,73,-56,-57,-77,150,-16,-41,-50,154,]),'OP':([11,27,33,41,87,97,144,],[60,75,78,89,89,137,75,]),'CP':([12,13,14,15,16,25,26,28,29,30,42,43,46,47,62,83,91,93,100,101,106,107,108,117,118,123,126,127,128,134,135,136,140,146,148,149,],[-80,-81,-82,-35,-36,-17,-18,-19,-20,-21,-51,-52,-53,-54,-24,-55,-58,-59,-78,-79,140,-22,-23,-14,-15,146,147,-48,-49,148,-56,-57,-77,-16,-50,152,]),'IN':([15,16,24,25,26,28,29,30,37,38,42,43,46,47,62,83,91,93,107,108,117,118,127,128,133,135,136,146,148,],[-35,-36,68,-17,-18,-19,-20,-21,82,-55,-51,-52,-53,-54,-24,-55,-58,-59,-22,-23,-14,-15,-48,-49,82,-56,-57,-16,-50,]),'CSB':([15,16,17,25,26,28,29,30,34,35,42,43,44,46,47,61,62,83,90,91,93,98,107,108,117,118,124,125,127,128,135,136,146,147,148,],[-35,-36,62,-17,-18,-19,-20,-21,-42,-43,-51,-52,91,-53,-54,107,-24,-55,135,-58,-59,138,-22,-23,-14,-15,-39,-40,-48,-49,-56,-57,-16,-41,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'calc':([2,],[8,]),'c_exp':([2,54,55,56,60,],[9,100,101,102,106,]),'c_condition':([2,],[10,]),'boolean':([2,3,4,5,17,18,38,44,45,52,53,54,55,56,60,65,66,67,69,70,75,76,77,78,79,80,81,88,89,109,112,137,150,],[13,29,29,47,29,29,47,47,47,29,29,13,13,13,13,29,29,29,29,29,29,29,29,29,47,47,29,47,47,29,29,47,29,]),'list':([2,3,4,17,18,52,53,54,55,56,60,65,66,67,69,70,75,76,77,78,81,109,112,150,154,],[14,30,30,30,30,30,30,14,14,14,14,112,30,30,30,30,30,30,30,30,30,112,30,30,155,]),'check':([3,],[19,]),'lang':([3,],[20,]),'premises':([3,],[21,]),'statement':([3,66,],[23,113,]),'exp':([3,17,18,65,66,69,70,75,78,109,112,150,],[24,61,63,111,24,117,118,123,126,111,145,153,]),'term':([3,4,17,18,52,53,65,66,67,69,70,75,76,77,78,81,109,112,150,],[25,34,25,25,34,34,25,25,114,25,25,25,34,34,25,129,25,25,25,]),'split':([4,],[31,]),'s_exp':([4,52,53,76,77,],[32,98,99,124,125,]),'token':([5,],[36,]),'t_exp':([5,38,44,45,79,80,88,89,137,],[37,86,90,92,127,128,133,134,149,]),'t_list':([5,38,44,45,79,80,88,89,137,],[38,83,83,83,83,83,83,83,83,]),'t_statement':([5,88,],[39,132,]),'t_state_ins':([5,],[40,]),'t_term':([5,38,44,45,79,80,88,89,137,],[42,42,42,42,42,42,42,42,42,]),'isnumber':([6,],[48,]),'state':([7,],[50,]),'st_list':([7,],[51,]),'comparator':([9,],[56,]),'symb':([24,37,133,],[67,81,81,]),'t_ins_exp':([38,],[84,]),'t_ins':([38,],[85,]),'st_ins_exp':([51,],[94,]),'st_ins':([51,],[95,]),'st_exp':([51,],[96,]),'conclusion':([65,109,],[110,141,]),'ins_exp':([112,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> CALC calc','start',2,'p_start','module_compile.py',144),
  ('start -> CHECK check','start',2,'p_start','module_compile.py',145),
  ('start -> SPLIT split','start',2,'p_start','module_compile.py',146),
  ('start -> TOKEN token','start',2,'p_start','module_compile.py',147),
  ('start -> ISNUMBER isnumber','start',2,'p_start','module_compile.py',148),
  ('start -> STATE state','start',2,'p_start','module_compile.py',149),
  ('lang -> premises MINUS MINUS conclusion','lang',4,'p_lang','module_compile.py',155),
  ('lang -> MINUS MINUS conclusion','lang',3,'p_lang','module_compile.py',156),
  ('premises -> statement','premises',1,'p_premises','module_compile.py',164),
  ('statement -> statement COMA statement','statement',3,'p_statement1','module_compile.py',170),
  ('statement -> exp symb term','statement',3,'p_statement2','module_compile.py',177),
  ('statement -> exp symb VAR','statement',3,'p_statement2','module_compile.py',178),
  ('statement -> exp IN NAME','statement',3,'p_statement3','module_compile.py',185),
  ('exp -> exp COMA exp','exp',3,'p_exp1','module_compile.py',192),
  ('exp -> exp SEMICOLON exp','exp',3,'p_exp1','module_compile.py',193),
  ('exp -> NAME OP exp CP','exp',4,'p_exp2','module_compile.py',200),
  ('exp -> term','exp',1,'p_exp3','module_compile.py',207),
  ('exp -> VAR','exp',1,'p_exp3','module_compile.py',208),
  ('term -> NUM','term',1,'p_term','module_compile.py',215),
  ('term -> boolean','term',1,'p_term','module_compile.py',216),
  ('term -> list','term',1,'p_term','module_compile.py',217),
  ('list -> OSB exp CSB','list',3,'p_list1','module_compile.py',224),
  ('list -> INF exp SUP','list',3,'p_list1','module_compile.py',225),
  ('list -> OSB CSB','list',2,'p_list2','module_compile.py',232),
  ('symb -> EQUAL EQUAL','symb',2,'p_symb','module_compile.py',239),
  ('symb -> INF EQUAL','symb',2,'p_symb','module_compile.py',240),
  ('symb -> SUP EQUAL','symb',2,'p_symb','module_compile.py',241),
  ('symb -> INF','symb',1,'p_symb','module_compile.py',242),
  ('symb -> SUP','symb',1,'p_symb','module_compile.py',243),
  ('symb -> MINUS SUP','symb',2,'p_symb','module_compile.py',244),
  ('conclusion -> exp MINUS SUP exp','conclusion',4,'p_conclusion1','module_compile.py',251),
  ('conclusion -> list ins_exp MINUS SUP list','conclusion',5,'p_conclusion2','module_compile.py',258),
  ('ins_exp -> NAME','ins_exp',1,'p_ins_exp','module_compile.py',265),
  ('ins_exp -> exp','ins_exp',1,'p_ins_exp','module_compile.py',266),
  ('boolean -> TRUE','boolean',1,'p_boolean','module_compile.py',273),
  ('boolean -> FALSE','boolean',1,'p_boolean','module_compile.py',274),
  ('check -> lang','check',1,'p_check','module_compile.py',287),
  ('split -> s_exp','split',1,'p_split','module_compile.py',301),
  ('s_exp -> s_exp COMA s_exp','s_exp',3,'p_s_exp1','module_compile.py',308),
  ('s_exp -> s_exp SEMICOLON s_exp','s_exp',3,'p_s_exp1','module_compile.py',309),
  ('s_exp -> NAME OP exp CP','s_exp',4,'p_s_exp2','module_compile.py',316),
  ('s_exp -> term','s_exp',1,'p_s_exp3','module_compile.py',323),
  ('s_exp -> VAR','s_exp',1,'p_s_exp3','module_compile.py',324),
  ('token -> t_exp','token',1,'p_token','module_compile.py',338),
  ('token -> t_list','token',1,'p_token','module_compile.py',339),
  ('token -> t_statement','token',1,'p_token','module_compile.py',340),
  ('token -> t_state_ins','token',1,'p_token','module_compile.py',341),
  ('t_exp -> t_exp COMA t_exp','t_exp',3,'p_t_exp1','module_compile.py',347),
  ('t_exp -> t_exp SEMICOLON t_exp','t_exp',3,'p_t_exp1','module_compile.py',348),
  ('t_exp -> NAME OP t_exp CP','t_exp',4,'p_t_exp2','module_compile.py',355),
  ('t_exp -> t_term','t_exp',1,'p_t_exp3','module_compile.py',362),
  ('t_exp -> VAR','t_exp',1,'p_t_exp3','module_compile.py',363),
  ('t_term -> NUM','t_term',1,'p_t_term','module_compile.py',370),
  ('t_term -> boolean','t_term',1,'p_t_term','module_compile.py',371),
  ('t_term -> t_list','t_term',1,'p_t_term','module_compile.py',372),
  ('t_list -> OSB t_exp CSB','t_list',3,'p_t_list1','module_compile.py',379),
  ('t_list -> INF t_exp SUP','t_list',3,'p_t_list1','module_compile.py',380),
  ('t_list -> OSB CSB','t_list',2,'p_t_list2','module_compile.py',387),
  ('t_list -> INF SUP','t_list',2,'p_t_list2','module_compile.py',388),
  ('t_statement -> t_statement COMA t_statement','t_statement',3,'p_t_statement1','module_compile.py',395),
  ('t_statement -> t_exp symb term','t_statement',3,'p_t_statement2','module_compile.py',402),
  ('t_statement -> t_exp symb VAR','t_statement',3,'p_t_statement2','module_compile.py',403),
  ('t_statement -> t_exp IN NAME','t_statement',3,'p_t_statement3','module_compile.py',410),
  ('t_state_ins -> t_list t_ins_exp','t_state_ins',2,'p_t_state_ins','module_compile.py',417),
  ('t_ins_exp -> t_ins','t_ins_exp',1,'p_t_ins_exp','module_compile.py',424),
  ('t_ins_exp -> t_exp','t_ins_exp',1,'p_t_ins_exp','module_compile.py',425),
  ('t_ins -> NAME','t_ins',1,'p_t_ins','module_compile.py',432),
  ('isnumber -> NUM','isnumber',1,'p_isnumber','module_compile.py',447),
  ('calc -> c_exp','calc',1,'p_calc','module_compile.py',463),
  ('calc -> c_condition','calc',1,'p_calc2','module_compile.py',470),
  ('c_condition -> c_exp comparator c_exp','c_condition',3,'p_condition','module_compile.py',477),
  ('comparator -> EQUAL EQUAL','comparator',2,'p_comparator','module_compile.py',483),
  ('comparator -> SUP','comparator',1,'p_comparator','module_compile.py',484),
  ('comparator -> SUP EQUAL','comparator',2,'p_comparator','module_compile.py',485),
  ('comparator -> INF','comparator',1,'p_comparator','module_compile.py',486),
  ('comparator -> INF EQUAL','comparator',2,'p_comparator','module_compile.py',487),
  ('c_exp -> NAME OP c_exp CP','c_exp',4,'p_exp_operator','module_compile.py',493),
  ('c_exp -> c_exp COMA c_exp','c_exp',3,'p_exp_more','module_compile.py',500),
  ('c_exp -> c_exp SEMICOLON c_exp','c_exp',3,'p_exp_more','module_compile.py',501),
  ('c_exp -> NUM','c_exp',1,'p_exp_int','module_compile.py',507),
  ('c_exp -> boolean','c_exp',1,'p_exp_int','module_compile.py',508),
  ('c_exp -> list','c_exp',1,'p_exp_list','module_compile.py',514),
  ('c_list -> OSB c_morelist CSB','c_list',3,'p_exp_list1','module_compile.py',520),
  ('c_morelist -> NUM COMA c_morelist','c_morelist',3,'p_exp_list2','module_compile.py',526),
  ('c_morelist -> NUM SEMICOLON c_morelist','c_morelist',3,'p_exp_list2','module_compile.py',527),
  ('c_morelist -> NUM','c_morelist',1,'p_exp_list3','module_compile.py',533),
  ('c_list -> OSB CSB','c_list',2,'p_exp_list4','module_compile.py',539),
  ('c_list -> INF c_morelist SUP','c_list',3,'p_exp_list5','module_compile.py',545),
  ('state -> st_list st_ins_exp','state',2,'p_state','module_compile.py',558),
  ('st_ins_exp -> st_ins','st_ins_exp',1,'p_st_ins_exp1','module_compile.py',566),
  ('st_ins_exp -> st_exp','st_ins_exp',1,'p_st_ins_exp2','module_compile.py',572),
  ('st_ins -> NAME','st_ins',1,'p_st_ins','module_compile.py',579),
  ('st_exp -> NAME OP t_exp CP','st_exp',4,'p_st_exp','module_compile.py',586),
  ('st_list -> OSB s_exp CSB','st_list',3,'p_st_list','module_compile.py',598),
  ('st_list -> INF s_exp SUP','st_list',3,'p_st_list','module_compile.py',599),
]
